name: Performance Test

on:
  pull_request:
  issue_comment:
    types: [created]
  schedule:
  # don't know the timezone but it's daily at least
  - cron:  '0 7 * * *'

env:
  terraform_version: '1.2.4'
  DOWNLOAD_ROOT: $HOME/download-root

jobs:
  build:
    name: Build dependencies
    runs-on: ubuntu-20.04
    if: |
      github.event_name == 'schedule' ||
      (github.event_name == 'pull_request' && startsWith(github.event.pull_request.title, 'perf(')) ||
      (github.event_name == 'issue_comment' && github.event.action == 'created' &&
        github.event.issue.pull_request &&
        contains('["OWNER", "COLLABORATOR", "MEMBER"]', github.event.comment.author_association) &&
        (startsWith(github.event.comment.body, '/perf') || startsWith(github.event.comment.body, '/flamegraph'))
      )

    env:
      DOWNLOAD_ROOT: $HOME/download-root

    steps:
    - name: Set environment variables
      run: |
          echo "INSTALL_ROOT=$HOME/install-root" >> $GITHUB_ENV
          echo "DOWNLOAD_ROOT=$HOME/download-root" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$INSTALL_ROOT/openssl/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
    - name: Checkout Kong source code
      uses: actions/checkout@v3

    - name: Lookup build cache
      uses: actions/cache@v3
      id: cache-deps
      with:
        path: ${{ env.INSTALL_ROOT }}
        key: ${{ hashFiles('.ci/setup_env_github.sh') }}-${{ hashFiles('.github/workflows/perf.yml') }}-${{ hashFiles('.requirements') }}-${{ hashFiles('kong-*.rockspec') }}-${{ hashFiles('Makefile') }}

    - name: Checkout kong-build-tools
      if: steps.cache-deps.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: Kong/kong-build-tools
        path: kong-build-tools
        ref: master

    - name: Checkout go-pluginserver
      if: steps.cache-deps.outputs.cache-hit != 'true'
      uses: actions/checkout@v3
      with:
        repository: Kong/go-pluginserver
        path: go-pluginserver

    - name: Add to Path
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: echo "$INSTALL_ROOT/openssl/bin:$INSTALL_ROOT/openresty/nginx/sbin:$INSTALL_ROOT/openresty/bin:$INSTALL_ROOT/luarocks/bin:$GITHUB_WORKSPACE/kong-build-tools/openresty-build-tools" >> $GITHUB_PATH

    - name: Install packages
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: sudo apt update && sudo apt install libyaml-dev valgrind libprotobuf-dev

    - name: Build Kong dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
          source .ci/setup_env_github.sh
          make dev

  # the above should be same as build_and_test.yml expect that perf.yml is used in cache_key

  perf:
    name: RPS, latency and flamegraphs
    runs-on: ubuntu-20.04
    needs: build
    if: |
      github.event_name == 'schedule' ||
      (github.event_name == 'pull_request' && startsWith(github.event.pull_request.title, 'perf(')) ||
      (github.event_name == 'issue_comment' && github.event.action == 'created' &&
        github.event.issue.pull_request &&
        contains('["OWNER", "COLLABORATOR", "MEMBER"]', github.event.comment.author_association) &&
        (startsWith(github.event.comment.body, '/perf') || startsWith(github.event.comment.body, '/flamegraph'))
      )

    steps:
    - name: Set environment variables
      run: |
          echo "INSTALL_ROOT=$HOME/install-root" >> $GITHUB_ENV
          echo "DOWNLOAD_ROOT=$HOME/download-root" >> $GITHUB_ENV
          echo "LD_LIBRARY_PATH=$INSTALL_ROOT/openssl/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV

    - name: Checkout Kong source code
      uses: actions/checkout@v3
      with:
        # Fetch all history for all tags and branches
        fetch-depth: 0

    - name: Lookup build cache
      uses: actions/cache@v3
      id: cache-deps
      with:
        path: ${{ env.INSTALL_ROOT }}
        key: ${{ hashFiles('.ci/setup_env_github.sh') }}-${{ hashFiles('.github/workflows/build_and_test.yml') }}-${{ hashFiles('.requirements') }}-${{ hashFiles('kong-*.rockspec') }}-${{ hashFiles('Makefile') }}

    - name: Add to Path
      run: echo "$INSTALL_ROOT/openssl/bin:$INSTALL_ROOT/openresty/nginx/sbin:$INSTALL_ROOT/openresty/bin:$INSTALL_ROOT/luarocks/bin:$GITHUB_WORKSPACE/kong-build-tools/openresty-build-tools:$INSTALL_ROOT/go-pluginserver" >> $GITHUB_PATH

    - name: Install performance test Dependencies
      run: |
        # in Kong repository
        sudo apt update && sudo apt install inkscape -y

        # terraform!
        wget https://releases.hashicorp.com/terraform/${{ env.terraform_version }}/terraform_${{ env.terraform_version }}_linux_amd64.zip
        unzip terraform_${{ env.terraform_version }}_linux_amd64.zip
        sudo mv terraform /usr/bin/

    - name: Choose perf suites
      id: choose_perf
      run: |
        suites=$(echo "${{ github.event.comment.body }}" | awk '{print $1}')
        tags=$(echo "${{ github.event.comment.body }}" | awk '{print $2}')

        if [[ $suite == "/flamegraph" ]]; then
          suites="02-flamegraph"
          if [[ -z $tags ]]; then
            tags="simple"
          fi
        elif [[ $suite == "/perf" ]]; then
          suites="01-rps"
          if [[ -z $tags ]]; then
            tags="baseline,single_route"
          fi
        else
          # if not specified by comment, run both
          suites="01-rps 02-flamegraph"
          if [[ -z $tags ]]; then
            tags="baseline,single_route,simple"
          fi
        fi

        echo ::set-output name=suites::"$suites"
        echo ::set-output name=tags::"$tags"

    - uses: xt0rted/pull-request-comment-branch@v1
      id: comment-branch
      if: github.event_name == 'issue_comment' && github.event.action == 'created'

    - name: Find compared versions
      id: compare_versions
      run: |
        pr_ref=$(echo "${{ github.event.pull_request.base.ref }}")
        custom_vers=$(echo "${{ github.event.comment.body }}" | awk '{print $3}')

        if [[ ! -z "${pr_ref}" ]]; then
          vers="git:${{ github.head_ref }},git:${pr_ref}"
        elif [[ ! -z "${custom_vers}" ]]; then
          vers="${custom_vers}"
        elif [[ ! -z "${{ github.event.comment.body }}" ]]; then
          vers="git:${{ steps.comment-branch.outputs.head_ref}},git:${{ steps.comment-branch.outputs.base_ref}}"
        else # is cron job/on master
          vers="git:master,git:origin/master~10,git:origin/master~50"
        fi

        echo $vers

        echo ::set-output name=vers::"$vers"

    - name: Run Tests
      env:
        PERF_TEST_VERSIONS: ${{ steps.compare_versions.outputs.vers }}
        PERF_TEST_METAL_PROJECT_ID: ${{ secrets.PERF_TEST_METAL_PROJECT_ID }}
        PERF_TEST_METAL_AUTH_TOKEN: ${{ secrets.PERF_TEST_METAL_AUTH_TOKEN }}
        PERF_TEST_DRIVER: terraform
        PERF_TEST_USE_DAILY_IMAGE: true
        PERF_TEST_DISABLE_EXEC_OUTPUT: true
      timeout-minutes: 120
      run: |
        eval `luarocks path`
        for suite in ${{ steps.choose_perf.outputs.suites }}; do
          # Run each test individually, ngx.pipe doesn't like to be imported twice
          # maybe bin/busted --no-auto-insulate
          for f in $(find "spec/04-perf/$suite/" -type f); do
            bin/busted -o gtest "$f" \
              -t "${{ steps.choose_perf.outputs.tags }}"
          done
        done
        
    - name: Teardown
      # Note: by default each job has if: ${{ success() }}
      if: always()
      env:
        PERF_TEST_VERSIONS: git:${{ github.sha }}
        PERF_TEST_METAL_PROJECT_ID: ${{ secrets.PERF_TEST_METAL_PROJECT_ID }}
        PERF_TEST_METAL_AUTH_TOKEN: ${{ secrets.PERF_TEST_METAL_AUTH_TOKEN }}
        PERF_TEST_DRIVER: terraform
        PERF_TEST_TEARDOWN_ALL: "true"
      run: |
        eval `luarocks path`
        bin/busted -o gtest spec/04-perf/99-teardown/

    - name: Generate high DPI graphs
      if: always()
      run: |
        for i in $(ls output/*.svg); do
          inkscape --export-area-drawing --export-png="${i%.*}.png" --export-dpi=300 -b FFFFFF $i
        done

    - uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Generate plots
      if: always()
      run: |
        cwd=$(pwd)
        cd spec/helpers/perf/charts/
        pip install -r requirements.txt
        for i in $(ls ${cwd}/output/*.data.json); do
          python ./charts.py $i -o "${cwd}/output/"
        done

    - name: Save results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: perf-results
        path: |
          output/
          !output/**/*.log
          
        retention-days: 31

    - name: Save error logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: error_logs
        path: |
          output/**/*.log
        retention-days: 31

    - name: Output
      if: always()
      id: output
      run: |
        if [[ "${{ steps.choose_perf.outputs.suites }}" =~ "02-flamegraph" ]]; then
          result="Please see Github Actions artifacts for flamegraphs.

          "
        fi

        result="${result}$(cat output/result.txt)" || true

        # https://github.community/t/set-output-truncates-multiline-strings/16852/2
        result="${result//'%'/'%25'}"
        result="${result//$'\n'/'%0A'}"
        result="${result//$'\r'/'%0D'}"

        echo ::set-output name=result::"$result"

    - name: Upload charts
      if: always()
      id: charts
      uses: devicons/public-upload-to-imgur@v2.2.2
      continue-on-error: true
      with:
        path: output/*.png
        client_id: ${{ secrets.PERF_TEST_IMGUR_CLIENT_ID }}

    - name: Comment
      if: |
        github.event_name == 'pull_request' ||
        (github.event_name == 'issue_comment' && github.event.issue.pull_request)
      uses: actions-ecosystem/action-create-comment@v1
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          ## :rocket: Performance test result

          **Test Suite**: ${{ steps.choose_perf.outputs.suites }} (${{ steps.choose_perf.outputs.tags }})

          ${{ join(fromJSON(steps.charts.outputs.markdown_urls), '     ') }}

          <details><summary>Click to expand</summary>

          ```
          ${{ steps.output.outputs.result }}

          Kong error logs are also available in Github Actions artifacts.
          ```

          </details>

          [Download Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts) for detailed results and interactive SVG flamegraphs.
