name: Build
on:
  workflow_call:
    inputs:
      relative-build-root:
        required: true
        type: string
    outputs:
      cache-key:
        description: 'Computed cache key, used for restoring cache in other workflows'
        value: ${{ jobs.build.outputs.cache-key }}

env:
  BUILD_ROOT: ${{ github.workspace }}/${{ inputs.relative-build-root }}
  RELATIVE_BUILD_ROOT: ${{ inputs.relative-build-root }}

jobs:
  build:
    name: Build dependencies
    runs-on: ubuntu-22.04

    outputs:
      cache-key: ${{ steps.cache-key.outputs.cache-key }}

    steps:
    - name: Checkout Kong source code
      uses: actions/checkout@v3

    # these aren't necessarily used by all tests, but building them here will
    # ensures that we have a warm cache when other tests _do_ need to build the
    # filters
    - name: Build WASM Test Filters
      uses: ./.github/actions/build-wasm-test-filters

    - name: Generate cache key
      id: cache-key
      uses: ./.github/actions/build-cache-key

    - name: Lookup build cache
      id: cache-deps
      # Note we only use the artifact in build, which may actually contain
      # lua source codes from a previous version. But busted
      # is able to override those files with them under current directory
      # so we don't need to rebuild it everytime. So that also means
      # the "artifacts" here can't be used as a per-commit CD artifact; only
      # the ones from release.yml could.
      uses: actions/cache@v3
      with:
        path: |
          artifacts
          ${{ env.RELATIVE_BUILD_ROOT }}
          !${{ env.RELATIVE_BUILD_ROOT }}/kong-dev/**/*
        key: ${{ steps.cache-key.outputs.cache-key }}

    - name: Install packages
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: sudo apt update && sudo apt install libyaml-dev valgrind libprotobuf-dev

    - name: Build Kong
      if: steps.cache-deps.outputs.cache-hit != 'true'
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        bazel build //build:kong --verbose_failures --action_env=INSTALL_DESTDIR=/usr/local
        bazel build //build:venv --verbose_failures --action_env=INSTALL_DESTDIR=/usr/local
        # debian package for artifacts to be used in reproducing in local environment
        bazel build :kong_deb --verbose_failures --action_env=INSTALL_DESTDIR=/usr/local

    - name: Bazel Outputs
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: bazel-outputs
        path: |
          bazel-out/_tmp/actions
        retention-days: 3

    - name: Collect artifacts
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        mkdir artifacts
        cp bazel-bin/pkg/kong.amd64.deb artifacts/

        # bazel output directory without write access, we add it when creating archive
        tar -zcvf artifacts/build.tar.gz -C bazel-bin/build/kong-dev --mode="a+rw" .

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: |
          artifacts
          ${{ env.RELATIVE_BUILD_ROOT }}
          !${{ env.RELATIVE_BUILD_ROOT }}/kong-dev/**/*
        retention-days: 3

    - name: Update PATH
      run: |
        echo "$BUILD_ROOT/kong-dev/bin" >> $GITHUB_PATH
        echo "$BUILD_ROOT/kong-dev/openresty/nginx/sbin" >> $GITHUB_PATH
        echo "$BUILD_ROOT/kong-dev/openresty/bin" >> $GITHUB_PATH

    - name: Debug (nginx)
      run: |
        find -name libluajit-5.1.so.2
        find -name luajit
        echo nginx: $(which nginx)
        nginx -V 2>&1 | sed -re 's/ --/\n--/g'
        ldd $(which nginx)

    - name: Debug (luarocks)
      run: |
        echo luarocks: $(which luarocks)
        luarocks --version || true
        luarocks config || true
