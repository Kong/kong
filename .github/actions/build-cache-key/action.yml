name: Build Cache Key

description: >
  Generates a cache key suitable for save/restore of Kong builds.

inputs:
  prefix:
    description: 'String prefix applied to the build cache key'
    required: false
    default: 'build'
  extra:
    description: 'Additional values/file hashes to use in the cache key'
    required: false

outputs:
  cache-key:
    description: 'The generated cache key'
    value: ${{ steps.cache-key.outputs.CACHE_KEY }}

runs:
  using: composite
  steps:
    - name: Generate cache key
      id: cache-key
      shell: bash
      env:
        EXTRA: ${{ inputs.extra }}
      run: |
        # please keep these sorted
        FILE_HASHES=(
          ${{ hashFiles('.bazelignore') }}
          ${{ hashFiles('.bazelrc') }}
          ${{ hashFiles('.bazelversion') }}
          ${{ hashFiles('.github/actions/build-cache-key/**') }}
          ${{ hashFiles('.github/workflows/build.yml') }}
          ${{ hashFiles('.requirements') }}
          ${{ hashFiles('BUILD.bazel') }}
          ${{ hashFiles('WORKSPACE') }}
          ${{ hashFiles('bin/kong') }}
          ${{ hashFiles('bin/kong-health') }}
          ${{ hashFiles('build/**') }}
          ${{ hashFiles('kong-*.rockspec') }}
          ${{ hashFiles('kong.conf.default') }}
        )

        echo "FILE_HASHES (init):"
        printf '%q\n' "${FILE_HASHES[@]}"

        if [[ -n ${EXTRA:-} ]]; then
          OFFSET=${#FILE_HASHES[@]}

          echo "EXTRA:"
          echo "$EXTRA"

          readarray \
            -O "$OFFSET" \
            -t \
            FILE_HASHES \
          <<< "$EXTRA"

          echo "FILE_HASHES (extended):"
          printf '%q\n' "${FILE_HASHES[@]}"
        fi

        NORMALIZED=$(
          printf '%s\n' "${FILE_HASHES[@]}" \
            | grep -vE '^$' \
            | sort --stable --unique
        )

        echo "FILE_HASHES (normalized):"
        echo "$NORMALIZED"

        HASH=$(sha256sum - <<< "$NORMALIZED" | awk '{print $1}' )
        CACHE_KEY=${{ inputs.prefix }}::${HASH}
        echo "cache-key: ${CACHE_KEY}"
        echo "CACHE_KEY=${CACHE_KEY}" >> $GITHUB_OUTPUT
