name: Build Cache Key

description: >
  Generates a cache key suitable for save/restore of Kong builds.

inputs:
  prefix:
    description: 'String prefix applied to the build cache key'
    required: false
    default: 'build'
  paths:
    description: 'Additional paths (newline-delimited) to use in cache key generation'
    required: false

outputs:
  cache-key:
    description: 'The generated cache key'
    value: ${{ steps.cache-key.outputs.CACHE_KEY }}

runs:
  using: composite
  steps:
    - name: Generate cache key
      id: cache-key
      shell: bash
      env:
        EXTRA_PATHS: ${{ inputs.paths }}
      run: |
        echo "::group::Enumerate Paths"

        LIST=$(mktemp)

        add_file() {
          local f=$1
          echo "path spec: $f"

          git ls-files \
            --full-name \
            --recurse-submodules \
            "$f" \
            >> "$LIST"
        }

        # please keep these sorted
        DEFAULT_PATHS=(
          '.bazelignore'
          '.bazelrc'
          '.bazelversion'
          '.github/actions/build-cache-key/**'
          '.github/workflows/build.yml'
          '.requirements'
          'BUILD.bazel'
          'WORKSPACE'
          'bin/kong'
          'bin/kong-health'
          'build/**'
          'kong-*.rockspec'
          'kong.conf.default'
        )

        for fname in "${DEFAULT_PATHS[@]}"; do
          add_file "$fname"
        done

        if [[ -n ${EXTRA_PATHS:-} ]]; then
          readarray -t EXTRA <<< "$EXTRA_PATHS"

          for fname in "${EXTRA[@]}"; do
            if [[ -z ${fname:-} ]]; then
              continue
            fi

            add_file "$fname"
          done
        fi

        echo "::endgroup::"

        echo "::group::Hash Files"

        HASH=$(mktemp)

        sort \
          --stable \
          --unique \
          < "$LIST" \
        | while read -r fname; do
          sha256sum "$fname" | tee -a "$HASH"
        done

        echo "::endgroup::"

        ALL=$(sha256sum "$HASH" | awk '{print $1}')

        CACHE_KEY=${{ inputs.prefix }}::${ALL}
        echo "cache-key: ${CACHE_KEY}"
        echo "CACHE_KEY=${CACHE_KEY}" >> $GITHUB_OUTPUT
