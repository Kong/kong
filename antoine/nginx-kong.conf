server_tokens off;

error_log logs/error.log notice;

lua_package_path       './?.lua;./?/init.lua;;./?.lua;./?/init.lua;/?.lua;/?/init.lua;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/share/lua/5.1/?.lua;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/share/lua/5.1/?.ljbc;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/share/lua/5.1/?/init.lua;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/share/lua/5.1/?/init.ljbc;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/site/lualib/?.lua;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/site/lualib/?.ljbc;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/site/lualib/?/init.lua;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/site/lualib/?/init.ljbc;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/lualib/?.lua;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/lualib/?.ljbc;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/lualib/?/init.lua;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/lualib/?/init.ljbc;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/luajit/share/luajit-2.1/?.lua;;;;';
lua_package_cpath      ';/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/site/lualib/?.so;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/lualib/?.so;./?.so;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/lib/lua/5.1/?.so;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/luajit/lib/lua/5.1/?.so;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/lib/lua/5.1/?.so;;;;';
lua_socket_pool_size   256;
lua_socket_log_errors  off;
lua_max_running_timers 4096;
lua_max_pending_timers 16384;

include 'nginx-kong-inject.conf';

lua_shared_dict kong                        5m;
lua_shared_dict kong_locks                  8m;
lua_shared_dict kong_healthchecks           5m;
lua_shared_dict kong_cluster_events         5m;
lua_shared_dict kong_rate_limiting_counters 12m;
lua_shared_dict kong_core_db_cache          128m;
lua_shared_dict kong_core_db_cache_miss     12m;
lua_shared_dict kong_db_cache               128m;
lua_shared_dict kong_db_cache_miss          12m;
lua_shared_dict kong_secrets                5m;

underscores_in_headers on;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;

# injected nginx_http_* directives
charset UTF-8;
client_body_buffer_size 8k;
client_max_body_size 0;
keepalive_requests 10000;
lua_regex_cache_max_entries 8192;
lua_regex_match_limit 100000;
lua_shared_dict prometheus_metrics 5m;
ssl_dhparam /Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/antoine/ssl/ffdhe2048.pem;
ssl_prefer_server_ciphers off;
ssl_protocols TLSv1.2 TLSv1.3;
ssl_session_tickets on;
ssl_session_timeout 1d;

init_by_lua_block {
    Kong = require 'kong'
    Kong.init()
}

init_worker_by_lua_block {
    Kong.init_worker()
}

exit_worker_by_lua_block {
    Kong.exit_worker()
}

log_format kong_log_format '$remote_addr - $remote_user [$time_local] '
                           '"$request" $status $body_bytes_sent '
                           '"$http_referer" "$http_user_agent" '
                           'kong_request_id: "$kong_request_id"';

# Load variable indexes
lua_kong_load_var_index default;

upstream kong_upstream {
    server 0.0.0.1;

    # injected nginx_upstream_* directives

    balancer_by_lua_block {
        Kong.balancer()
    }
}

server {
    server_name kong;
    listen 0.0.0.0:8000 reuseport backlog=16384;
    listen 0.0.0.0:8443 ssl reuseport backlog=16384;

    http2 on;

    error_page 400 404 405 408 411 412 413 414 417 /kong_error_handler;
    error_page 494 =494                            /kong_error_handler;
    error_page 500 502 503 504                     /kong_error_handler;

    # Append the kong request id to the error log
    # https://github.com/Kong/lua-kong-nginx-module#lua_kong_error_log_request_id
    lua_kong_error_log_request_id $kong_request_id;

    access_log logs/access.log kong_log_format;

    error_log  logs/error.log notice;

    ssl_certificate     /Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/antoine/ssl/kong-default.crt;
    ssl_certificate_key /Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/antoine/ssl/kong-default.key;
    ssl_certificate     /Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/antoine/ssl/kong-default-ecdsa.crt;
    ssl_certificate_key /Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/antoine/ssl/kong-default-ecdsa.key;
    ssl_session_cache   shared:SSL:10m;
    ssl_certificate_by_lua_block {
        Kong.ssl_certificate()
    }

    # injected nginx_proxy_* directives
    real_ip_header X-Real-IP;
    real_ip_recursive off;

    rewrite_by_lua_block {
        Kong.rewrite()
    }

    access_by_lua_block {
        Kong.access()
    }

    header_filter_by_lua_block {
        Kong.header_filter()
    }

    body_filter_by_lua_block {
        Kong.body_filter()
    }

    log_by_lua_block {
        Kong.log()
    }

    location / {
        default_type                     '';

        set $ctx_ref                     '';
        set $upstream_te                 '';
        set $upstream_host               '';
        set $upstream_upgrade            '';
        set $upstream_connection         '';
        set $upstream_scheme             '';
        set $upstream_uri                '';
        set $upstream_x_forwarded_for    '';
        set $upstream_x_forwarded_proto  '';
        set $upstream_x_forwarded_host   '';
        set $upstream_x_forwarded_port   '';
        set $upstream_x_forwarded_path   '';
        set $upstream_x_forwarded_prefix '';
        set $kong_proxy_mode             'http';

        proxy_http_version      1.1;
        proxy_buffering          on;
        proxy_request_buffering  on;

        # injected nginx_location_* directives

        proxy_set_header      TE                 $upstream_te;
        proxy_set_header      Host               $upstream_host;
        proxy_set_header      Upgrade            $upstream_upgrade;
        proxy_set_header      Connection         $upstream_connection;
        proxy_set_header      X-Forwarded-For    $upstream_x_forwarded_for;
        proxy_set_header      X-Forwarded-Proto  $upstream_x_forwarded_proto;
        proxy_set_header      X-Forwarded-Host   $upstream_x_forwarded_host;
        proxy_set_header      X-Forwarded-Port   $upstream_x_forwarded_port;
        proxy_set_header      X-Forwarded-Path   $upstream_x_forwarded_path;
        proxy_set_header      X-Forwarded-Prefix $upstream_x_forwarded_prefix;
        proxy_set_header      X-Real-IP          $remote_addr;
        proxy_set_header      X-Kong-Request-Id  $kong_request_id;
        proxy_pass_header     Server;
        proxy_pass_header     Date;
        proxy_ssl_name        $upstream_host;
        proxy_ssl_server_name on;
        proxy_pass            $upstream_scheme://kong_upstream$upstream_uri;
    }

    location @unbuffered {
        internal;
        default_type         '';
        set $kong_proxy_mode 'unbuffered';

        proxy_http_version      1.1;
        proxy_buffering         off;
        proxy_request_buffering off;

        proxy_set_header      TE                 $upstream_te;
        proxy_set_header      Host               $upstream_host;
        proxy_set_header      Upgrade            $upstream_upgrade;
        proxy_set_header      Connection         $upstream_connection;
        proxy_set_header      X-Forwarded-For    $upstream_x_forwarded_for;
        proxy_set_header      X-Forwarded-Proto  $upstream_x_forwarded_proto;
        proxy_set_header      X-Forwarded-Host   $upstream_x_forwarded_host;
        proxy_set_header      X-Forwarded-Port   $upstream_x_forwarded_port;
        proxy_set_header      X-Forwarded-Path   $upstream_x_forwarded_path;
        proxy_set_header      X-Forwarded-Prefix $upstream_x_forwarded_prefix;
        proxy_set_header      X-Real-IP          $remote_addr;
        proxy_set_header      X-Kong-Request-Id  $kong_request_id;
        proxy_pass_header     Server;
        proxy_pass_header     Date;
        proxy_ssl_name        $upstream_host;
        proxy_ssl_server_name on;
        proxy_pass            $upstream_scheme://kong_upstream$upstream_uri;
    }

    location @unbuffered_request {
        internal;
        default_type         '';
        set $kong_proxy_mode 'unbuffered';

        proxy_http_version      1.1;
        proxy_buffering          on;
        proxy_request_buffering off;

        proxy_set_header      TE                 $upstream_te;
        proxy_set_header      Host               $upstream_host;
        proxy_set_header      Upgrade            $upstream_upgrade;
        proxy_set_header      Connection         $upstream_connection;
        proxy_set_header      X-Forwarded-For    $upstream_x_forwarded_for;
        proxy_set_header      X-Forwarded-Proto  $upstream_x_forwarded_proto;
        proxy_set_header      X-Forwarded-Host   $upstream_x_forwarded_host;
        proxy_set_header      X-Forwarded-Port   $upstream_x_forwarded_port;
        proxy_set_header      X-Forwarded-Path   $upstream_x_forwarded_path;
        proxy_set_header      X-Forwarded-Prefix $upstream_x_forwarded_prefix;
        proxy_set_header      X-Real-IP          $remote_addr;
        proxy_set_header      X-Kong-Request-Id  $kong_request_id;
        proxy_pass_header     Server;
        proxy_pass_header     Date;
        proxy_ssl_name        $upstream_host;
        proxy_ssl_server_name on;
        proxy_pass            $upstream_scheme://kong_upstream$upstream_uri;
    }

    location @unbuffered_response {
        internal;
        default_type         '';
        set $kong_proxy_mode 'unbuffered';

        proxy_http_version      1.1;
        proxy_buffering         off;
        proxy_request_buffering  on;

        proxy_set_header      TE                 $upstream_te;
        proxy_set_header      Host               $upstream_host;
        proxy_set_header      Upgrade            $upstream_upgrade;
        proxy_set_header      Connection         $upstream_connection;
        proxy_set_header      X-Forwarded-For    $upstream_x_forwarded_for;
        proxy_set_header      X-Forwarded-Proto  $upstream_x_forwarded_proto;
        proxy_set_header      X-Forwarded-Host   $upstream_x_forwarded_host;
        proxy_set_header      X-Forwarded-Port   $upstream_x_forwarded_port;
        proxy_set_header      X-Forwarded-Path   $upstream_x_forwarded_path;
        proxy_set_header      X-Forwarded-Prefix $upstream_x_forwarded_prefix;
        proxy_set_header      X-Real-IP          $remote_addr;
        proxy_set_header      X-Kong-Request-Id  $kong_request_id;
        proxy_pass_header     Server;
        proxy_pass_header     Date;
        proxy_ssl_name        $upstream_host;
        proxy_ssl_server_name on;
        proxy_pass            $upstream_scheme://kong_upstream$upstream_uri;
    }

    location @grpc {
        internal;
        default_type         '';
        set $kong_proxy_mode 'grpc';

        grpc_set_header      TE                 $upstream_te;
        grpc_set_header      X-Forwarded-For    $upstream_x_forwarded_for;
        grpc_set_header      X-Forwarded-Proto  $upstream_x_forwarded_proto;
        grpc_set_header      X-Forwarded-Host   $upstream_x_forwarded_host;
        grpc_set_header      X-Forwarded-Port   $upstream_x_forwarded_port;
        grpc_set_header      X-Forwarded-Path   $upstream_x_forwarded_path;
        grpc_set_header      X-Forwarded-Prefix $upstream_x_forwarded_prefix;
        grpc_set_header      X-Real-IP          $remote_addr;
        grpc_set_header      X-Kong-Request-Id  $kong_request_id;
        grpc_pass_header     Server;
        grpc_pass_header     Date;
        grpc_ssl_name        $upstream_host;
        grpc_ssl_server_name on;
        grpc_pass            $upstream_scheme://kong_upstream;
    }

    location = /kong_buffered_http {
        internal;
        default_type         '';
        set $kong_proxy_mode 'http';

        rewrite_by_lua_block       {
          -- ngx.localtion.capture will create a new nginx request,
          -- so the upstream ssl-related info attached to the `r` gets lost.
          -- we need to re-set them here to the new nginx request.
          local ctx = ngx.ctx
          local upstream_ssl = require("kong.runloop.upstream_ssl")

          upstream_ssl.set_service_ssl(ctx)
          upstream_ssl.fallback_upstream_client_cert(ctx)
        }
        access_by_lua_block        {;}
        header_filter_by_lua_block {;}
        body_filter_by_lua_block   {;}
        log_by_lua_block           {;}

        proxy_http_version 1.1;
        proxy_set_header      TE                 $upstream_te;
        proxy_set_header      Host               $upstream_host;
        proxy_set_header      Upgrade            $upstream_upgrade;
        proxy_set_header      Connection         $upstream_connection;
        proxy_set_header      X-Forwarded-For    $upstream_x_forwarded_for;
        proxy_set_header      X-Forwarded-Proto  $upstream_x_forwarded_proto;
        proxy_set_header      X-Forwarded-Host   $upstream_x_forwarded_host;
        proxy_set_header      X-Forwarded-Port   $upstream_x_forwarded_port;
        proxy_set_header      X-Forwarded-Path   $upstream_x_forwarded_path;
        proxy_set_header      X-Forwarded-Prefix $upstream_x_forwarded_prefix;
        proxy_set_header      X-Real-IP          $remote_addr;
        proxy_set_header      X-Kong-Request-Id  $kong_request_id;
        proxy_pass_header     Server;
        proxy_pass_header     Date;
        proxy_ssl_name        $upstream_host;
        proxy_ssl_server_name on;
        proxy_pass            $upstream_scheme://kong_upstream$upstream_uri;
    }

    location = /kong_error_handler {
        internal;
        default_type                 '';

        uninitialized_variable_warn  off;

        rewrite_by_lua_block {;}
        access_by_lua_block  {;}

        content_by_lua_block {
            Kong.handle_error()
        }
    }
}

server {
    charset UTF-8;
    server_name kong_admin;
    listen 127.0.0.1:8001 reuseport backlog=16384;
    listen 127.0.0.1:8444 ssl reuseport backlog=16384;

    http2 on;

    access_log logs/admin_access.log;
    error_log  logs/error.log notice;

    ssl_certificate     /Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/antoine/ssl/admin-kong-default.crt;
    ssl_certificate_key /Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/antoine/ssl/admin-kong-default.key;
    ssl_certificate     /Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/antoine/ssl/admin-kong-default-ecdsa.crt;
    ssl_certificate_key /Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/antoine/ssl/admin-kong-default-ecdsa.key;
    ssl_session_cache   shared:AdminSSL:10m;

    # injected nginx_admin_* directives
    client_body_buffer_size 10m;
    client_max_body_size 10m;

    location / {
        default_type application/json;
        content_by_lua_block {
            Kong.admin_content()
        }
        header_filter_by_lua_block {
            Kong.admin_header_filter()
        }
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }
}

server {
    charset UTF-8;
    server_name kong_status;
    listen 127.0.0.1:8007 reuseport backlog=16384;


    access_log off;
    error_log  logs/status_error.log notice;


    # injected nginx_status_* directives

    location / {
        default_type application/json;
        content_by_lua_block {
            Kong.status_content()
        }
        header_filter_by_lua_block {
            Kong.status_header_filter()
        }
    }

    location /robots.txt {
        return 200 'User-agent: *\nDisallow: /';
    }
}

server {
    server_name kong_gui;
    listen 0.0.0.0:8002;
    listen 0.0.0.0:8445 ssl;


    ssl_certificate     /Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/antoine/ssl/admin-gui-kong-default.crt;
    ssl_certificate_key /Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/antoine/ssl/admin-gui-kong-default.key;
    ssl_certificate     /Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/antoine/ssl/admin-gui-kong-default-ecdsa.crt;
    ssl_certificate_key /Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/antoine/ssl/admin-gui-kong-default-ecdsa.key;
    ssl_protocols TLSv1.2 TLSv1.3;

    client_max_body_size 10m;
    client_body_buffer_size 10m;

    types {
        text/html                             html htm shtml;
        text/css                              css;
        text/xml                              xml;
        image/gif                             gif;
        image/jpeg                            jpeg jpg;
        application/javascript                js;
        application/json                      json;
        image/png                             png;
        image/tiff                            tif tiff;
        image/x-icon                          ico;
        image/x-jng                           jng;
        image/x-ms-bmp                        bmp;
        image/svg+xml                         svg svgz;
        image/webp                            webp;
    }

    access_log logs/admin_gui_access.log;
    error_log logs/admin_gui_error.log;

    gzip on;
    gzip_types text/plain text/css application/json application/javascript;

    include nginx-kong-gui-include.conf;
}


server {
    charset UTF-8;
    server_name kong_worker_events;
    listen unix:/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/antoine/worker_events.sock;
    access_log off;
    location / {
        content_by_lua_block {
          require("resty.events.compat").run()
        }
    }
}
