
log_format basic '$remote_addr [$time_local] '
                 '$protocol $status $bytes_sent $bytes_received '
                 '$session_time';

lua_package_path       './?.lua;./?/init.lua;;./?.lua;./?/init.lua;/?.lua;/?/init.lua;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/share/lua/5.1/?.lua;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/share/lua/5.1/?.ljbc;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/share/lua/5.1/?/init.lua;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/share/lua/5.1/?/init.ljbc;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/site/lualib/?.lua;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/site/lualib/?.ljbc;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/site/lualib/?/init.lua;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/site/lualib/?/init.ljbc;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/lualib/?.lua;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/lualib/?.ljbc;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/lualib/?/init.lua;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/lualib/?/init.ljbc;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/luajit/share/luajit-2.1/?.lua;;;;';
lua_package_cpath      ';/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/site/lualib/?.so;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/lualib/?.so;./?.so;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/lib/lua/5.1/?.so;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/openresty/luajit/lib/lua/5.1/?.so;/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/bazel-bin/build/kong-dev/lib/lua/5.1/?.so;;;;';
lua_socket_pool_size   256;
lua_socket_log_errors  off;
lua_max_running_timers 4096;
lua_max_pending_timers 16384;

include 'nginx-kong-stream-inject.conf';

lua_shared_dict stream_kong                        5m;
lua_shared_dict stream_kong_locks                  8m;
lua_shared_dict stream_kong_healthchecks           5m;
lua_shared_dict stream_kong_cluster_events         5m;
lua_shared_dict stream_kong_rate_limiting_counters 12m;
lua_shared_dict stream_kong_core_db_cache          128m;
lua_shared_dict stream_kong_core_db_cache_miss     12m;
lua_shared_dict stream_kong_db_cache               128m;
lua_shared_dict stream_kong_db_cache_miss          12m;
lua_shared_dict stream_kong_secrets                5m;

ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;

# injected nginx_stream_* directives
lua_shared_dict stream_prometheus_metrics 5m;
ssl_dhparam /Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/antoine/ssl/ffdhe2048.pem;
ssl_prefer_server_ciphers off;
ssl_protocols TLSv1.2 TLSv1.3;
ssl_session_tickets on;
ssl_session_timeout 1d;


init_by_lua_block {
    -- shared dictionaries conflict between stream/http modules. use a prefix.
    local shared = ngx.shared
    local stream_shdict_prefix = "stream_"
    ngx.shared = setmetatable({}, {
        __pairs = function()
            local i
            return function()
                local k, v = next(shared, i)
                i = k
                if k and k:sub(1, #stream_shdict_prefix) == stream_shdict_prefix then
                    k = k:sub(#stream_shdict_prefix + 1)
                end
                return k, v
            end
        end,
        __index = function(t, k)
            return shared[stream_shdict_prefix .. k]
        end,
    })

    Kong = require 'kong'
    Kong.init()
}

init_worker_by_lua_block {
    Kong.init_worker()
}

upstream kong_upstream {
    server 0.0.0.1:1;
    balancer_by_lua_block {
        Kong.balancer()
    }

    # injected nginx_supstream_* directives
}


server {
    listen unix:/Users/antoine.jacquemin@konghq.com/Downloads/kongN/kong/antoine/stream_worker_events.sock;
    error_log  logs/error.log notice;
    access_log off;
    content_by_lua_block {
      require("resty.events.compat").run()
    }
}
