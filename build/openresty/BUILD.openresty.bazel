load("@rules_foreign_cc//foreign_cc:defs.bzl", "configure_make", "make")
load("@kong_bindings//:variables.bzl", "KONG_VAR")
load("@openresty_binding//:variables.bzl", "LUAJIT_VERSION")
load("@bazel_skylib//rules:write_file.bzl", "write_file")

# this works around an issue that occurs when installing/compiling the v8 wasm
# runtime engine, specifically: cargo/bazel/rules_foreign_cc decide ARFLAGS
# should be "rcsD cq ...", which is incorrect and results in ar thinking
# "cq" is a positional filename parameter-- casuing the install of the wabt-sys
# rust crate to fail when compiling wabt
#
# this works by impersonating ar, and only passing along 'rcsD' when it detects
# 'rcsd cq' as the first 2 positional parameters passed to "ar"
#
# this workaround is specifically only enabeld when targetting the v8 wasm
# runtime to minimize impact to the rest fo the build
#
# note that this dummy ar is technically in use for the entire openresty build,
# since we build wasm as part of that
write_file(
    name = "wasmx_v8_ar",
    out = "ar",
    content = ["""#!/usr/bin/env bash

if [[ "${1} ${2}" == 'rcsD cq' ]]; then

    touch /tmp/log
    echo "before: $@" >> /tmp/log

    shift 2
    extra='rcsD'

    echo "after: $@" >> /tmp/log
fi

/usr/bin/ar ${extra:-} $@
"""],
    is_executable = True,
    visibility = ["//visibility:public"],
)

filegroup(
    name = "luajit_srcs",
    srcs = glob(
        include = ["bundle/LuaJIT*/**"],
    ),
)

genrule(
    name = "luajit_xcflags",
    outs = ["luajit_xcflags.txt"],
    cmd = "macos=" + select({
              "@platforms//os:macos": "1",
              "//conditions:default": "0",
          }) + "\n" +
          "aarch64=" + select({
              "@platforms//cpu:aarch64": "1",
              "//conditions:default": "0",
          }) + "\n" +
          "debug=" + select({
              "@kong//:debug_flag": "1",
              "//conditions:default": "0",
          }) + "\n" +
          "cross=" + select({
              "@kong//:any-cross": "1",
              "//conditions:default": "0",
          }) +
          """
    flags="-DLUAJIT_ENABLE_LUA52COMPAT -DLUAJIT_VERSION=\\\\\\"{luajit_version}\\\\\\""
    if [[ $$debug -eq 1 ]]; then
        flags="$$flags -DLUA_USE_ASSERT -DLUA_USE_APICHECK"
        if [[ $$macos -ne 1 ]]; then
            if [[ $$cross -ne 1 ]]; then
                flags="$$flags -DLUA_USE_VALGRIND"
            fi
            if [[ $$aarch64 -ne 1 ]]; then
                flags="$$flags -DLUAJIT_USE_SYSMALLOC"
            fi
        fi
    fi

    if [[ $$macos -eq 1 ]]; then
        flags="$$flags -fno-stack-check"
    fi

    echo "$$flags" >$@

    """.format(luajit_version = LUAJIT_VERSION),
)

make(
    name = "luajit",
    args = [
        "LDFLAGS=\"-Wl,-rpath,%s/kong/lib\"" % KONG_VAR["INSTALL_DESTDIR"],  # make ffi.load happy, even when it's invoked without nginx
        "XCFLAGS=\"$(cat $$EXT_BUILD_ROOT$$/$(execpath :luajit_xcflags))\"",
        "LUA_ROOT=%s/openresty/luajit" % KONG_VAR["INSTALL_DESTDIR"].rstrip("/"),
        "MACOSX_DEPLOYMENT_TARGET=" + KONG_VAR["MACOSX_DEPLOYMENT_TARGET"],
    ] + select({
        "@kong//:any-cross": [
            "HOST_CC=cc",
        ],
        "@platforms//os:macos": [
            "AR=/usr/bin/ar",
        ],
        "//conditions:default": [
        ],
    }),
    build_data = [
        ":luajit_xcflags",
    ],
    lib_source = ":luajit_srcs",
    out_binaries = [
        "luajit",
    ],
    out_shared_libs = select({
        "@platforms//os:macos": [
            "libluajit-5.1.2.dylib",
        ],
        "//conditions:default": [
            "libluajit-5.1.so.2",
        ],
    }),
    targets = [
        "-j" + KONG_VAR["NPROC"],
        "install",
    ],
    visibility = ["//visibility:public"],
)

CONFIGURE_OPTIONS = [
    "--with-pcre-jit",
    "--with-http_ssl_module",
    "--with-http_sub_module",
    "--with-http_realip_module",
    "--with-http_stub_status_module",
    "--with-http_v2_module",
    "--with-stream_realip_module",  # >= 1.11.4
    "--with-stream_ssl_preread_module",  # >= 1.11.5
    "--without-http_encrypted_session_module",
    "--without-http_xss_module",
    "--without-http_coolkit_module",
    "--without-http_set_misc_module",
    "--without-http_form_input_module",
    "--without-http_srcache_module",
    "--without-http_lua_upstream_module",
    "--without-http_array_var_module",
    "--without-http_memc_module",
    "--without-http_redis2_module",
    "--without-http_redis_module",
    "--without-http_rds_json_module",
    "--without-http_rds_csv_module",
    "--without-ngx_devel_kit_module",
    "--with-luajit=$$EXT_BUILD_DEPS$$/luajit",
    "--with-cc-opt=\"-I$$EXT_BUILD_DEPS$$/pcre/include\"",
    "--with-cc-opt=\"-I$$EXT_BUILD_DEPS$$/openssl/include\"",
    "--with-cc-opt=\"-I$$EXT_BUILD_DEPS$$/luajit/include\"",
    "--with-ld-opt=\"-L$$EXT_BUILD_DEPS$$/pcre/lib\"",
    "--with-ld-opt=\"-L$$EXT_BUILD_DEPS$$/openssl/lib\"",
    "--with-ld-opt=\"-L$$EXT_BUILD_DEPS$$/luajit/lib\"",
    # here let's try not having --disable-new-dtags; --disable-new-dtags creates runpath instead of rpath
    # note runpath can't handle indirect dependency (nginx -> luajit -> dlopen("other")), so each indirect
    # dependency should have its rpath set (luajit, libxslt etc); on the other side, rpath is not
    # overridable by LD_LIBRARY_PATH and it may cause trouble debugging, so we _should_ prefer runpath.
    # if it doesn't work, then add --disable-new-dtags back
    "--with-ld-opt=\"-Wl,-rpath,%s/kong/lib\"" % KONG_VAR["INSTALL_DESTDIR"],
    "-j%s" % KONG_VAR["NPROC"],

    # options from our customed patch
    "--with-install-prefix=%s" % KONG_VAR["INSTALL_DESTDIR"],

    # Note $$EXT_BUILD_ROOT$$ is bazel variable not from environment variable
    # which points to the directory of current WORKSPACE

    # external modules
    "--add-module=$$EXT_BUILD_ROOT$$/external/lua-kong-nginx-module",
    "--add-module=$$EXT_BUILD_ROOT$$/external/lua-kong-nginx-module/stream",
    "--add-module=$$EXT_BUILD_ROOT$$/external/lua-resty-lmdb",
    "--add-module=$$EXT_BUILD_ROOT$$/external/lua-resty-events",
] + select({
    "@kong//:aarch64-linux-anylibc-cross": [
        "--crossbuild=Linux:aarch64",
        "--with-endian=little",
        "--with-int=4",
        "--with-long=8",
        "--with-long-long=8",
        "--with-ptr-size=8",
        "--with-sig-atomic-t=4",
        "--with-size-t=8",
        "--with-off-t=8",
        "--with-time-t=8",
        "--with-sys-nerr=132",
    ],
    "@kong//:x86_64-linux-musl-cross": [
        "--crossbuild=Linux:x86_64",
        "--with-endian=little",
        "--with-int=4",
        "--with-long=8",
        "--with-long-long=8",
        "--with-ptr-size=8",
        "--with-sig-atomic-t=4",
        "--with-size-t=8",
        "--with-off-t=8",
        "--with-time-t=8",
        "--with-sys-nerr=132",
    ],
    "//conditions:default": [],
}) + select({
    "@kong//:any-cross": [
        "--with-cc-opt=\"-I$$EXT_BUILD_DEPS$$/zlib/include\"",
        "--with-ld-opt=\"-L$$EXT_BUILD_DEPS$$/zlib/lib\"",
    ],
    "//conditions:default": [],
}) + select({
    # any cross build that migrated to use libxcrypt needs those flags
    # alpine uses different libc so doesn't need it
    "@kong//:aarch64-linux-anylibc-cross": [
        "--with-cc-opt=\"-I$$EXT_BUILD_DEPS$$/libxcrypt/include\"",
        "--with-ld-opt=\"-L$$EXT_BUILD_DEPS$$/libxcrypt/lib\"",
    ],
    "//conditions:default": [],
}) + select({
    "@kong//:debug_flag": [
        "--with-debug",
        "--with-no-pool-patch",
        "--with-cc-opt=\"-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC -g -O0\"",
    ],
    "//conditions:default": [],
}) + select({
    "@kong//:fips_flag": [
        "--with-cc-opt=\"-I$$EXT_BUILD_DEPS$$/include\"",
        "--with-ld-opt=\"-L$$EXT_BUILD_DEPS$$/lib -Wl,-Bsymbolic-functions -Wl,-z,relro\"",
    ],
    "//conditions:default": [],
}) + select({
    "@platforms//os:linux": [
        # neded for wasmx module
        # although this is centos7 specific, the flag will work on any GNU linker
        # we place it here to skip macos, which uses darwin ld
        # https://github.com/Kong/ngx_wasm_module/commit/e70a19f53e1dda99d016c5cfa393652720959afd
        "--with-ld-opt=\"-Wl,--allow-multiple-definition\"",
    ],
    "//conditions:default": [],
}) + select({
    "@kong//:wasmx_flag": [
        "--with-cc-opt=\"-DNGX_WASM_HOST_PROPERTY_NAMESPACE=kong\"",
    ],
    "//conditions:default": [],
}) + select({
    "@kong//:wasmx_static_mod": [
        "--add-module=$$EXT_BUILD_ROOT$$/external/ngx_wasm_module",
    ],
    "@kong//:wasmx_dynamic_mod": [
        "--with-compat",
        "--add-dynamic-module=$$EXT_BUILD_ROOT$$/external/ngx_wasm_module",
    ],
    "//conditions:default": [],
}) + select({
    "@kong//:wasmx_v8_x86_64": [
        "--with-cc-opt=\"-I$$EXT_BUILD_ROOT$$/external/v8-x86_64/include\"",
        "--with-ld-opt=\"-L$$EXT_BUILD_ROOT$$/external/v8-x86_64/lib\"",
    ],
    "//conditions:default": [],
}) + select({
    "@kong//:wasmx_v8_aarch64": [
        "--with-cc-opt=\"-I$$EXT_BUILD_ROOT$$/external/v8-aarch64/include\"",
        "--with-ld-opt=\"-L$$EXT_BUILD_ROOT$$/external/v8-aarch64/lib\"",
    ],
    "//conditions:default": [],
}) + select({
    "@kong//:wasmx_wasmer_x86_64": [
        "--with-cc-opt=\"-I$$EXT_BUILD_ROOT$$/external/wasmer-x86_64/include\"",
        "--with-ld-opt=\"-L$$EXT_BUILD_ROOT$$/external/wasmer-x86_64/lib\"",
    ],
    "//conditions:default": [],
}) + select({
    "@kong//:wasmx_wasmer_aarch64": [
        "--with-cc-opt=\"-I$$EXT_BUILD_ROOT$$/external/wasmer-aarch64/include\"",
        "--with-ld-opt=\"-L$$EXT_BUILD_ROOT$$/external/wasmer-aarch64/lib\"",
    ],
    "//conditions:default": [],
}) + select({
    "@kong//:wasmx_wasmtime_x86_64": [
        "--with-cc-opt=\"-I$$EXT_BUILD_ROOT$$/external/wasmtime-x86_64/include\"",
        "--with-ld-opt=\"-L$$EXT_BUILD_ROOT$$/external/wasmtime-x86_64/lib\"",
    ],
    "//conditions:default": [],
}) + select({
    "@kong//:wasmx_wasmtime_aarch64": [
        "--with-cc-opt=\"-I$$EXT_BUILD_ROOT$$/external/wasmtime-aarch64/include\"",
        "--with-ld-opt=\"-L$$EXT_BUILD_ROOT$$/external/wasmtime-aarch64/lib\"",
    ],
    "//conditions:default": [],
})

wasmx_build_data = select({
    "@kong//:wasmx_flag": [
        "@ngx_wasm_module//:all_srcs",
    ],
    "//conditions:default": [],
}) + select({
    "@kong//:wasmx_v8_x86_64": [
        "@v8-x86_64//:all_srcs",
    ],
    "//conditions:default": [],
}) + select({
    "@kong//:wasmx_v8_aarch64": [
        "@v8-aarch64//:all_srcs",
    ],
    "//conditions:default": [],
}) + select({
    "@kong//:wasmx_wasmer_x86_64": [
        "@wasmer-x86_64//:all_srcs",
    ],
    "//conditions:default": [],
}) + select({
    "@kong//:wasmx_wasmer_aarch64": [
        "@wasmer-aarch64//:all_srcs",
    ],
    "//conditions:default": [],
}) + select({
    "@kong//:wasmx_wasmtime_x86_64": [
        "@wasmtime-x86_64//:all_srcs",
    ],
    "//conditions:default": [],
}) + select({
    "@kong//:wasmx_wasmtime_aarch64": [
        "@wasmtime-aarch64//:all_srcs",
    ],
    "//conditions:default": [],
})

# TODO: set prefix to populate pid_path, conf_path, log_path etc

filegroup(
    name = "all_srcs",
    srcs = glob(
        include = [
            "configure",
            "bundle/**",
        ],
        exclude = [
            "bundle/LuaJIT*/**",
        ],
    ),
)

configure_make(
    name = "openresty",
    build_data = [
        "@lua-kong-nginx-module//:all_srcs",
        "@lua-resty-lmdb//:all_srcs",
        "@lua-resty-events//:all_srcs",
        "@openresty_binding//:all_srcs",
    ] + wasmx_build_data,
    configure_command = "configure",
    configure_in_place = True,
    configure_options = CONFIGURE_OPTIONS,
    env = select({
        "@kong//:wasmx_v8_x86_64": {
            "NGX_WASM_RUNTIME": "v8",
            "NGX_WASM_RUNTIME_LIB": "$$EXT_BUILD_ROOT$$/external/v8-x86_64/lib",
            "NGX_WASM_RUNTIME_INC": "$$EXT_BUILD_ROOT$$/external/v8-x86_64/include",
            # https://github.com/Kong/ngx_wasm_module/blob/0f07c712c48d410190ec5e0cc0b34fdfd190387d/t/10-build/003-dynamic_module.t#L43
            "NGX_WASM_RUNTIME_LD_OPT": "$$EXT_BUILD_ROOT$$/external/v8-x86_64/lib/libwee8.a -lv8bridge -lstdc++ -lm -ldl -lpthread",
            # see the above comments and source for this dummy ar script
            "AR": "$(execpath @openresty//:wasmx_v8_ar)",
        },
        "@kong//:wasmx_v8_aarch64": {
            "NGX_WASM_RUNTIME": "v8",
            "NGX_WASM_RUNTIME_LIB": "$$EXT_BUILD_ROOT$$/external/v8-aarch64/lib",
            "NGX_WASM_RUNTIME_INC": "$$EXT_BUILD_ROOT$$/external/v8-aarch64/include",
            # https://github.com/Kong/ngx_wasm_module/blob/0f07c712c48d410190ec5e0cc0b34fdfd190387d/t/10-build/003-dynamic_module.t#L43
            "NGX_WASM_RUNTIME_LD_OPT": "$$EXT_BUILD_ROOT$$/external/v8-aarch64/lib/libwee8.a -lv8bridge -lstdc++ -lm -ldl -lpthread",
            # see the above comments and source for this dummy ar script
            "AR": "$(execpath @openresty//:wasmx_v8_ar)",
        },
        "@kong//:wasmx_wasmer_x86_64": {
            "NGX_WASM_RUNTIME": "wasmer",
            "NGX_WASM_RUNTIME_LIB": "$$EXT_BUILD_ROOT$$/external/wasmer-x86_64/lib",
            "NGX_WASM_RUNTIME_INC": "$$EXT_BUILD_ROOT$$/external/wasmer-x86_64/include",
            # https://github.com/Kong/ngx_wasm_module/blob/0f07c712c48d410190ec5e0cc0b34fdfd190387d/t/10-build/003-dynamic_module.t#L30
            "NGX_WASM_RUNTIME_LD_OPT": "$$EXT_BUILD_ROOT$$/external/wasmer-x86_64/lib/libwasmer.a -lm -ldl -lpthread",
        },
        "@kong//:wasmx_wasmer_aarch64": {
            "NGX_WASM_RUNTIME": "wasmer",
            "NGX_WASM_RUNTIME_LIB": "$$EXT_BUILD_ROOT$$/external/wasmer-aarch64/lib",
            "NGX_WASM_RUNTIME_INC": "$$EXT_BUILD_ROOT$$/external/wasmer-aarch64/include",
            # https://github.com/Kong/ngx_wasm_module/blob/0f07c712c48d410190ec5e0cc0b34fdfd190387d/t/10-build/003-dynamic_module.t#L30
            "NGX_WASM_RUNTIME_LD_OPT": "$$EXT_BUILD_ROOT$$/external/wasmer-aarch64/lib/libwasmer.a -lm -ldl -lpthread",
        },
        "@kong//:wasmx_wasmtime_x86_64": {
            "NGX_WASM_RUNTIME": "wasmtime",
            "NGX_WASM_RUNTIME_LIB": "$$EXT_BUILD_ROOT$$/external/wasmtime-x86_64/lib",
            "NGX_WASM_RUNTIME_INC": "$$EXT_BUILD_ROOT$$/external/wasmtime-x86_64/include",
            # https://github.com/Kong/ngx_wasm_module/blob/0f07c712c48d410190ec5e0cc0b34fdfd190387d/t/10-build/003-dynamic_module.t#L30
            "NGX_WASM_RUNTIME_LD_OPT": "$$EXT_BUILD_ROOT$$/external/wasmtime-x86_64/lib/libwasmtime.a -lm -ldl -lpthread",
        },
        "@kong//:wasmx_wasmtime_aarch64": {
            "NGX_WASM_RUNTIME": "wasmtime",
            "NGX_WASM_RUNTIME_LIB": "$$EXT_BUILD_ROOT$$/external/wasmtime-aarch64/lib",
            "NGX_WASM_RUNTIME_INC": "$$EXT_BUILD_ROOT$$/external/wasmtime-aarch64/include",
            # https://github.com/Kong/ngx_wasm_module/blob/0f07c712c48d410190ec5e0cc0b34fdfd190387d/t/10-build/003-dynamic_module.t#L30
            "NGX_WASM_RUNTIME_LD_OPT": "$$EXT_BUILD_ROOT$$/external/wasmtime-aarch64/lib/libwasmtime.a -lm -ldl -lpthread",
        },
        "//conditions:default": {},
    }),
    lib_source = ":all_srcs",
    out_bin_dir = "",
    out_binaries = [
        "nginx/sbin/nginx",
    ],
    targets = [
        "-j" + KONG_VAR["NPROC"],
        "install -j" + KONG_VAR["NPROC"],
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@pcre",
        "@openresty//:luajit",
        "@openssl//:openssl",
    ] + select({
        "@kong//:any-cross": [
            "@cross_deps_zlib//:zlib",
        ],
        "//conditions:default": [],
    }) + select({
        # any cross build that migrated to use libxcrypt needs those flags
        # alpine uses different libc so doesn't need it
        "@kong//:aarch64-linux-anylibc-cross": [
            "@cross_deps_libxcrypt//:libxcrypt",
        ],
        "//conditions:default": [],
    }),
)
