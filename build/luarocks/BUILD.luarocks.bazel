load("@rules_foreign_cc//foreign_cc:defs.bzl", "configure_make")

# load("@rules_foreign_cc//foreign_cc:defs.bzl", "make")
load("@kong_bindings//:variables.bzl", "KONG_VAR")

filegroup(
    name = "all_srcs",
    srcs = glob(
        include = ["**"],
        exclude = ["*.bazel"],
    ),
)

# This rules is used to install luarocks to install rockspecs
# we need a different rule to install luarocks in release artifact
# so that we got correct interpreter path etc.
configure_make(
    name = "luarocks_host",
    configure_command = "configure",
    configure_in_place = True,
    configure_options = [
        "--lua-suffix=jit",
        "--with-lua=$$EXT_BUILD_DEPS$$/luajit",
        "--with-lua-include=$$EXT_BUILD_DEPS$$/luajit/include/luajit-2.1",
    ],
    lib_source = ":all_srcs",
    out_bin_dir = "",
    out_binaries = ["bin/luarocks"],  # fake binary
    out_data_dirs = ["luarocks"],  # mark all files as data
    targets = [
        "build",
        "install",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "@openresty//:luajit",
    ],
)

# TODO: set cross compile CC/LD in luarocks_make

genrule(
    name = "luarocks_exec",
    srcs = [
        "@openssl",
    ] + select({
        "@kong//:any-cross": ["@cross_deps_libyaml//:libyaml"],
        "//conditions:default": [
            ":luarocks_host",
            "@openresty//:luajit",
        ],
    }),
    outs = ["luarocks_exec.sh"],
    cmd = ("LIB_RPATH='%s'/kong/lib" % KONG_VAR["INSTALL_DESTDIR"]) +
          """
WORKSPACE_PATH=$$(pwd)
ROCKS_DIR=$$WORKSPACE_PATH/$$(dirname $@)/luarocks_tree
if [ ! -d $$ROCKS_DIR ]; then
    mkdir -p $$ROCKS_DIR
fi
# pre create the dir and file so bsd readlink is happy
mkdir -p "$$ROCKS_DIR/../cache"
CACHE_DIR=$$(readlink -f "$$ROCKS_DIR/../cache")
touch "$$ROCKS_DIR/../luarocks_config.lua"
ROCKS_CONFIG=$$(readlink -f "$$ROCKS_DIR/../luarocks_config.lua")

OPENSSL_DIR=$$WORKSPACE_PATH/$$(echo '$(locations @openssl)' | awk '{print $$1}')

# we use system libyaml on macos
if [[ "$$OSTYPE" == "darwin"* ]]; then
    YAML_DIR=$$(brew --prefix)/opt/libyaml
elif [[ -d $$WORKSPACE_PATH/$(BINDIR)/external/cross_deps_libyaml/libyaml ]]; then
    # TODO: is there a good way to use locations but doesn't break non-cross builds?
    YAML_DIR=$$WORKSPACE_PATH/$(BINDIR)/external/cross_deps_libyaml/libyaml
else
    YAML_DIR=/usr
fi

CC=$(CC)
LD=$(CC) # yes, not a typo
if [[ $$CC != /* ]]; then
    # point to our relative path of musl toolchain
    CC=$$WORKSPACE_PATH/$$CC
    LD=$$WORKSPACE_PATH/$$LD
fi

echo "
rocks_trees = {
    { name = [[system]], root = [[$$ROCKS_DIR]] }
}
local_cache = '$$CACHE_DIR'
gcc_rpath = false -- disable default rpath, add our own
variables = {
    CC = '$$CC',
    LD = '$$LD',
    LDFLAGS = '-Wl,-rpath,$$LIB_RPATH',
}
" > $$ROCKS_CONFIG

LUAROCKS_HOST=$$(echo '$(locations :luarocks_host)' | awk '{print $$1}')

host_luajit=$$WORKSPACE_PATH/$$(echo $(locations @openresty//:luajit) | awk '{{print $$1}}')/bin/luajit

cat << EOF > $@
LIB_RPATH=$$LIB_RPATH
WORKSPACE_PATH=$$WORKSPACE_PATH
LUAROCKS_HOST=$$LUAROCKS_HOST
ROCKS_DIR=$$ROCKS_DIR
CACHE_DIR=$$CACHE_DIR
ROCKS_CONFIG=$$ROCKS_CONFIG

export LUAROCKS_CONFIG=$$ROCKS_CONFIG
export CC=$$CC
export LD=$$LD
export EXT_BUILD_ROOT=$$WORKSPACE_PATH # for musl

# force the interpreter here instead of invoking luarocks directly,
# some distros has BINPRM_BUF_SIZE smaller than the shebang generated,
# which is usually more than 160 bytes
$$host_luajit $$WORKSPACE_PATH/$$LUAROCKS_HOST/bin/luarocks \\$$@ \\
    OPENSSL_DIR=$$OPENSSL_DIR \\
    CRYPTO_DIR=$$OPENSSL_DIR \\
    YAML_DIR=$$YAML_DIR
EOF
""",
    executable = True,
    toolchains = [
        "@bazel_tools//tools/cpp:current_cc_toolchain",
    ],
    tools = select({
        "@kong//:any-cross": [
            ":luarocks_host",
            "@openresty//:luajit",
        ],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
)

genrule(
    name = "luarocks_make",
    srcs = [
        "@kong//:rockspec_srcs",
        ":luarocks_exec",
        ":luarocks_target",  # to avoid concurrency issue, run this after luarocks_target
    ],
    outs = ["luarocks_make.log"],
    cmd = """
        if [[ "$$OSTYPE" == "darwin"* ]]; then
            export DEVELOPER_DIR=$$(xcode-select -p)
            export SDKROOT=$$(xcrun --sdk macosx --show-sdk-path)
        fi
        mkdir -p $$(dirname $@)
        # lyaml needs this and doesn't honor --no-doc
        # the alternate will populate a non-existent HOME
        # env var just to let ldoc happy
        # alias LDOC command to true(1) command
        export LDOC=true

        $(location :luarocks_exec) make --no-doc 2>&1 >$@.tmp

        # only generate the output when the command succeeds
        mv $@.tmp $@
    """,
    visibility = ["//visibility:public"],
)

# install luarocks itself in target configuration
genrule(
    name = "luarocks_target",
    srcs = [
        ":luarocks_exec",
    ] + select({
        "@kong//:any-cross": [],
        "//conditions:default": [
            ":luarocks_host",
            "@openresty//:luajit",
        ],
    }),
    outs = ["luarocks_target.log"],
    cmd = """
    build_destdir={build_destdir}
    install_destdir={install_destdir}
    luarocks_version={luarocks_version}
    workspace_path={workspace_path}
    """.format(
              build_destdir = KONG_VAR["BUILD_DESTDIR"],
              install_destdir = KONG_VAR["INSTALL_DESTDIR"],
              luarocks_version = KONG_VAR["LUAROCKS"],
              workspace_path = KONG_VAR["WORKSPACE_PATH"],
          ) +
          """
        mkdir -p $$(dirname $@)

        # install luarocks
        $(location :luarocks_exec) install "luarocks $${luarocks_version}" 2>&1 >$@.tmp

        # use host configuration to invoke luarocks API to wrap a correct bin/luarocks script
        rocks_tree=$${workspace_path}/$$(dirname '$(location @luarocks//:luarocks_exec)')/luarocks_tree
        host_luajit=$${workspace_path}/$$(echo $(locations @openresty//:luajit) | awk '{{print $$1}}')/bin/luajit

        host_luarocks_tree=$$(echo '$(locations luarocks_host)' | awk '{print $$1}')
        export LUA_PATH="$${build_destdir}/share/lua/5.1/?.lua;$${build_destdir}/share/lua/5.1/?/init.lua;$${host_luarocks_tree}/share/lua/5.1/?.lua;$${host_luarocks_tree}/share/lua/5.1/?/init.lua;;"

        ROCKS_CONFIG="luarocks_make_config.lua"
        cat << EOF > $$ROCKS_CONFIG
rocks_trees = {
    { name = [[system]], root = [[$$rocks_tree]] }
}
EOF
        export LUAROCKS_CONFIG=$$ROCKS_CONFIG

        $${host_luajit} $(location @kong//build/luarocks:luarocks_wrap_script.lua) \
                    luarocks $${rocks_tree} $${install_destdir} 2>&1 >>$@.tmp

        # write the luarocks config with host configuration
        mkdir -p $$rocks_tree/etc/luarocks
        cat << EOF > $$rocks_tree/etc/luarocks/config-5.1.lua
-- LuaRocks configuration
rocks_trees = {
    { name = "user", root = home .. "/.luarocks" };
    { name = "system", root = "$${install_destdir}" };
}
lua_interpreter = "luajit";
variables = {
    LUA_DIR = "$${install_destdir}/openresty/luajit";
    LUA_INCDIR = "$${install_destdir}/openresty/luajit/include/luajit-2.1";
    LUA_BINDIR = "$${install_destdir}/openresty/luajit/bin";
}
EOF

        # TODO: this still doesn't work
        sed -i -e "s|$$rocks_tree|$$install_destdir|g" $$rocks_tree/bin/luarocks

        # only generate the output when the command succeeds
        mv $@.tmp $@
    """,
    tools = [
        "@kong//build/luarocks:luarocks_wrap_script.lua",
    ] + select({
        "@kong//:any-cross": [
            ":luarocks_host",
            "@openresty//:luajit",
        ],
        "//conditions:default": [],
    }),
    visibility = ["//visibility:public"],
)
