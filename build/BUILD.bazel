load("@kong_bindings//:variables.bzl", "KONG_VAR")
load("//build:build_system.bzl", "kong_directory_genrule")

exports_files([
    "package/nfpm.yaml",
])

lib_deps = [
    "@openssl",  #TODO: select over fips (but select doesn't work in list comprehension)
]

install_lib_deps_cmd = "\n".join([
    """
    DEP=${WORKSPACE_PATH}/$(echo $(locations %s) | awk '{print $1}')
    # use tar magic to exclude files and create with correct permission
    copy_with_filter ${DEP} ${BUILD_DESTDIR}/kong
""" % dep
    for dep in lib_deps
])

lualib_deps = [
    "@lua-kong-nginx-module//:all_srcs",
    "@lua-resty-lmdb//:all_srcs",
    "@lua-resty-events//:all_srcs",
    "@lua-resty-websocket//:all_srcs",
    "@atc_router",
]

install_lualib_deps_cmd = "\n".join([
    """
    DEP=$(pwd)/external/%s
    # TODO: fix atc_router makefile so that we can choose to only install lualib
    sed -i -e '/libatc_router.so/d' ${DEP}/Makefile
    make --silent -C ${DEP} LUA_LIB_DIR=${BUILD_DESTDIR}/openresty/lualib install
""" % dep.lstrip("@").split("/")[0]
    for dep in lualib_deps
])

kong_directory_genrule(
    name = "kong",
    srcs = [
        "@openresty//:openresty",
        "@openresty//:luajit",
        "@luarocks//:luarocks_make",
        "@luarocks//:luarocks_target",
        "@protoc//:all_srcs",
    ] + lib_deps + lualib_deps,
    cmd =
        """ set -e
        function copy_with_filter {
            mkdir -p $2
            tar -cC $1 --exclude="*.a" --exclude="*.la" \
                        --exclude="*/share/*" --exclude="*/bin/*" \
                        --exclude="*.log" . | tar -xC $2/.
            chmod -R "+rw" $2
        }
        function LN {
            if [[ "$OSTYPE" == "darwin"* ]]; then
                # TODO: support relative path links once we start to cross compile on macOS
                ln -sf $@
            else
                ln -srf $@
            fi
        }
        rm -rf ${BUILD_DESTDIR}
        mkdir -p ${BUILD_DESTDIR}/kong/lib ${BUILD_DESTDIR}/openresty ${BUILD_DESTDIR}/bin

        if [[ "$OSTYPE" == "darwin"* ]]; then
            libext="dylib"
        else # assume linux
            libext="so"
        fi

        OPENRESTY=${WORKSPACE_PATH}/$(echo '$(locations @openresty//:openresty)' | awk '{print $1}')
        cp -r ${OPENRESTY}/. ${BUILD_DESTDIR}/openresty/.
        LN ${BUILD_DESTDIR}/openresty/bin/resty ${BUILD_DESTDIR}/bin/resty
        chmod -R "+rw" ${BUILD_DESTDIR}/openresty

        LUAJIT=${WORKSPACE_PATH}/$(echo '$(locations @openresty//:luajit)' | awk '{print $1}')
        copy_with_filter ${LUAJIT} ${BUILD_DESTDIR}/openresty/luajit
        cp ${LUAJIT}/bin/luajit ${BUILD_DESTDIR}/openresty/luajit/bin/luajit
        tar -cC ${LUAJIT}/share . | tar -xC ${BUILD_DESTDIR}/openresty/luajit/share
        chmod -R "+rw" ${BUILD_DESTDIR}/openresty/luajit

        LUAROCKS=${WORKSPACE_PATH}/$(dirname '$(location @luarocks//:luarocks_make)')/luarocks_tree
        cp -r ${LUAROCKS}/. ${BUILD_DESTDIR}/.
        rm ${BUILD_DESTDIR}/bin/lapis ${BUILD_DESTDIR}/bin/luarocks-admin

        ATC_ROUTER=${WORKSPACE_PATH}/$(location @atc_router)
        cp $ATC_ROUTER ${BUILD_DESTDIR}/openresty/lualib/.

        cp -r $(locations @protoc//:all_srcs) ${BUILD_DESTDIR}/kong/.

    """ + install_lib_deps_cmd + install_lualib_deps_cmd +
        """
        mkdir -p ${BUILD_DESTDIR}/etc/kong
        cp kong.conf.default ${BUILD_DESTDIR}/etc/kong/kong.conf.default

        # housecleaning
        mv ${BUILD_DESTDIR}/kong/*.${libext}* ${BUILD_DESTDIR}/kong/lib 2>/dev/null || true
        if [[ -d ${BUILD_DESTDIR}/kong/lib64 ]]; then
            copy_with_filter ${BUILD_DESTDIR}/kong/lib64 ${BUILD_DESTDIR}/kong/lib
            rm -rf ${BUILD_DESTDIR}/kong/lib64
        fi

        # remove pkgconfig since they are invalid anyway
        find ${BUILD_DESTDIR} -name "*.pc" -delete

        # clean empty directory
        find ${BUILD_DESTDIR} -empty -type d -delete

        # foreign_cc rule dereferences symlink, we will dedup them here
        # TODO: patch https://github.com/bazelbuild/rules_foreign_cc/blob/main/foreign_cc/private/framework.bzl#L450 to not remove symlink
        for f in $(find ${BUILD_DESTDIR}/kong/lib ${BUILD_DESTDIR}/openresty/luajit/lib -type f -name "*.${libext}*" ); do
            if [[ -L "$f" ]]; then continue; fi # already a symlink
            target=$(ls -r1 $f.* 2>/dev/null | head -n1)
            if [[ ! -z "$target" && "$f" != "$target" ]]; then
                LN "$target" "$f"
            fi
        done
        LN ${BUILD_DESTDIR}/openresty/nginx/sbin/nginx ${BUILD_DESTDIR}/openresty/bin/openresty
    """,
    # XXX: bazel forces 0555 as artifact permission, which is not correct for packagin
    # here we deliberately use a different directory so file permission is preserved
    # see also https://github.com/bazelbuild/bazel/issues/5588
    output_dir = KONG_VAR["BUILD_NAME"] + ".nop",
    visibility = ["//visibility:public"],
)

genrule(
    name = "venv",
    srcs = [
        ":kong",
    ],
    outs = [
        "%s-venv.sh" % KONG_VAR["BUILD_NAME"],
    ],
    cmd = """
    workspace_path={workspace_path}
    build_name={build_name}
    """.format(
        build_name = KONG_VAR["BUILD_NAME"],
        workspace_path = KONG_VAR["WORKSPACE_PATH"],
    ) + """

        cat << EOF > $@
#!/bin/bash

INSTALL_ROOT=$${workspace_path}/bazel-bin/build/$${build_name}
ROCKS_CONFIG="\\$$INSTALL_ROOT/rocks_config"
ROCKS_ROOT="\\$$INSTALL_ROOT"

chmod -R a+rw "\\$$INSTALL_ROOT"

export LD_LIBRARY_PATH=\\$$INSTALL_ROOT/kong/lib
mkdir -p \\$$INSTALL_ROOT/venv/bin

echo '#!/bin/bash
'\\$$INSTALL_ROOT/openresty/bin/resty -I \\$$INSTALL_ROOT/openresty/site/lualib -I \\$$INSTALL_ROOT/openresty/lualib --nginx \\$$INSTALL_ROOT/openresty/nginx/sbin/nginx' "\\$$@"
' > \\$$INSTALL_ROOT/venv/bin/resty
chmod +x \\$$INSTALL_ROOT/venv/bin/resty

export PATH="\\$$INSTALL_ROOT/venv/bin:\\$$INSTALL_ROOT/openresty/bin:\\$$INSTALL_ROOT/openresty/nginx/sbin:\\$$INSTALL_ROOT/openresty/luajit/bin:\\$$INSTALL_ROOT/luarocks/bin:\\$$INSTALL_ROOT/bin:$${workspace_path}/bin:\\$$PATH"

echo "
rocks_trees = {
{ name = [[system]], root = [[\\$$ROCKS_ROOT]] }
}

" > \\$$ROCKS_CONFIG

export LUAROCKS_CONFIG=\\$$ROCKS_CONFIG

# duplicate package.[c]path even though we have set in resty-cli, so luajit and kong can consume
export LUA_PATH="./?.lua;./?/init.lua;\\$$INSTALL_ROOT/openresty/site/lualib/?.ljbc;\\$$INSTALL_ROOT/openresty/site/lualib/?/init.ljbc;\\$$INSTALL_ROOT/openresty/lualib/?.ljbc;\\$$INSTALL_ROOT/openresty/lualib/?/init.ljbc;\\$$INSTALL_ROOT/openresty/site/lualib/?.lua;\\$$INSTALL_ROOT/openresty/site/lualib/?/init.lua;\\$$INSTALL_ROOT/openresty/lualib/?.lua;\\$$INSTALL_ROOT/openresty/lualib/?/init.lua;\\$$INSTALL_ROOT/openresty/luajit/share/luajit-2.1.0-beta3/?.lua;\\$$ROCKS_ROOT/share/lua/5.1/?.ljbc;\\$$ROCKS_ROOT/share/lua/5.1/?/init.ljbc;\\$$ROCKS_ROOT/share/lua/5.1/?.lua;\\$$ROCKS_ROOT/share/lua/5.1/?/init.lua;;"

export LUA_CPATH="\\$$INSTALL_ROOT/openresty/site/lualib/?.so;\\$$INSTALL_ROOT/openresty/lualib/?.so;./?.so;\\$$INSTALL_ROOT/lib/lua/5.1/?.so;\\$$INSTALL_ROOT/openresty/luajit/lib/lua/5.1/?.so;\\$$ROCKS_ROOT/lib/lua/5.1/?.so;;"
export KONG_PREFIX="\\$$INSTALL_ROOT/kong/servroot"
export LIBRARY_PREFIX="\\$$INSTALL_ROOT/kong" # let "make dev" happy
export OPENSSL_DIR="\\$$INSTALL_ROOT/kong" # let "make dev" happy

EOF

        echo \\* Please run ". $@" to activate the "$${build_name}" environment
    """,
    executable = True,
    visibility = ["//visibility:public"],
)
