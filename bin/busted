#!/usr/bin/env resty

setmetatable(_G, nil)

local pl_path = require("pl.path")

local cert_path = pl_path.abspath("spec/fixtures/kong_spec.crt")

local DEFAULT_RESTY_FLAGS=string.format(" -c 4096 --http-conf 'lua_ssl_trusted_certificate %s;' ", cert_path)

if not os.getenv("KONG_BUSTED_RESPAWNED") then
  -- initial run, so go update the environment
  local script = {}
  for line in io.popen("set"):lines() do
    local ktvar, val = line:match("^KONG_TEST_([^=]*)=(.*)")
    if ktvar then
      -- reinserted KONG_TEST_xxx as KONG_xxx; append
      table.insert(script, "export KONG_" .. ktvar .. "=" ..val)
    end

    local var = line:match("^(KONG_[^=]*)")
    local var_for_spec = line:match("^(KONG_SPEC_[^=]*)")
    if var and not var_for_spec then
      -- remove existing KONG_xxx and KONG_TEST_xxx variables; prepend
      table.insert(script, 1, "unset " .. var)
    end
  end
  -- add cli recursion detection
  table.insert(script, "export KONG_BUSTED_RESPAWNED=1")

  -- rebuild the invoked commandline, while inserting extra resty-flags
  local resty_flags = DEFAULT_RESTY_FLAGS
  local cmd = { "exec", "/usr/bin/env", "resty" }
  local cmd_prefix_count = #cmd
  for i = 0, #arg do
    if arg[i]:sub(1, 12) == "RESTY_FLAGS=" then
      resty_flags = arg[i]:sub(13, -1)

    else
      table.insert(cmd, "'" .. arg[i] .. "'")
    end
  end

  if resty_flags then
    table.insert(cmd, cmd_prefix_count+1, resty_flags)
  end

  table.insert(script, table.concat(cmd, " "))

  -- recurse cli command, with proper variables (un)set for clean testing
  local _, _, rc = os.execute(table.concat(script, "; "))
  os.exit(rc)
end

pcall(require, "luarocks.loader")

require("kong.globalpatches")({
  cli = true,
  rbusted = true
})

-- some libraries used in test like spec/helpers
-- calls cosocket in module level, and as LuaJIT's
-- `require` is implemented in C, this throws
-- "attempt to yield across C-call boundary" error
-- the following pure-lua implementation is to bypass
-- this limitation, without need to modify all tests
_G.require = require "spec.require".require

-- Busted command-line runner
require 'busted.runner'({ standalone = false })

-- vim: set ft=lua ts=2 sw=2 sts=2 et :
