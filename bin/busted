#!/usr/bin/env resty

local DEFAULT_RESTY_FLAGS="-c 4096"

do
  local lines = getmetatable(io.output()).lines

  getmetatable(io.output()).lines = function(self, ...)
    local iter = lines(self, ...)

    return function()
      local ok, ret = pcall(iter)
      if ok then
        return ret
      end
    end
  end
end

if not os.getenv("KONG_BUSTED_RESPAWNED") then
  -- initial run, so go update the environment
  local script = {}
  for line in io.popen("set"):lines() do
    local ktvar, val = line:match("^KONG_TEST_([^=]*)=(.*)")
    if ktvar then
      -- reinserted KONG_TEST_xxx as KONG_xxx; append
      table.insert(script, "export KONG_" .. ktvar .. "=" ..val)
    end

    local var = line:match("^(KONG_[^=]*)")
    if var then
      -- remove existing KONG_xxx and KONG_TEST_xxx variables; prepend
      table.insert(script, 1, "unset " .. var)
    end
  end
  -- add cli recursion detection
  table.insert(script, "export KONG_BUSTED_RESPAWNED=1")

  -- rebuild the invoked commandline, while inserting extra resty-flags
  local resty_flags = DEFAULT_RESTY_FLAGS
  local cmd = { "exec" }
  for i = -1, #arg do
    if arg[i]:sub(1, 12) == "RESTY_FLAGS=" then
      resty_flags = arg[i]:sub(13, -1)

    else
      table.insert(cmd, "'" .. arg[i] .. "'")
    end
  end

  if resty_flags then
    table.insert(cmd, 3, resty_flags)
  end

  table.insert(script, table.concat(cmd, " "))

  -- recurse cli command, with proper variables (un)set for clean testing
  local _, _, rc = os.execute(table.concat(script, "; "))
  os.exit(rc)
end

require "luarocks.loader"

-- pre-load the ffi module, such that it becomes part of the environment
-- and Busted will not try to GC and reload it. The ffi is not suited
-- for that and will occasionally segfault if done so.
local ffi = require "ffi"
-- Now patch ffi.cdef to only be called once with each definition, as it
-- will error on re-registering.
local old_cdef = ffi.cdef
local exists = {}
ffi.cdef = function(def)
  if exists[def] then return end
  exists[def] = true
  return old_cdef(def)
end

require("kong.globalpatches")({
  cli = true,
  rbusted = true
})

-- Busted command-line runner
require 'busted.runner'({ standalone = false })
