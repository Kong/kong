-- Making sure it's alright		
		local log_message = cjson.decode(res)
		assert.equal("TLSv1.2", log_message.request.tls.version)
		assert.is_string(log_message.request.tls.cipher)
		assert.equal("SUCCESS", log_message.request.tls.client_verify)
		end)
		
		it("logs TLS info (#grpcs)", function()
		local thread = helpers.tcp_server(TCP_PORT) -- Starting the mock TCP server
		
		-- Making the request
		local ok, resp = proxy_client_grpcs({
		service = "hello.HelloService.SayHello",
		body = {
		greeting = "world!"
		},
		opts = {
		["-authority"] = "tcp_logging_grpcs.test",
		}
		})
		assert.truthy(ok)
		assert.truthy(resp)
		
		-- Getting back the TCP server input
		local ok, res = thread:join()
		assert.True(ok)
		assert.is_string(res)
		
		-- Making sure it's alright
		local log_message = cjson.decode(res)
		
		assert.equal("grpcs", log_message.service.protocol)
		assert.equal("TLSv1.2", log_message.request.tls.version)
		assert.is_string(log_message.request.tls.cipher)
		assert.equal("NONE", log_message.request.tls.client_verify)
		end)
		
		it("#stream reports tcp streams", function()
		local thread = helpers.tcp_server(TCP_PORT) -- Starting the mock TCP server
		
		local tcp = ngx.socket.tcp()
		assert(tcp:connect(helpers.get_proxy_ip(false), 19000))
		
		assert(tcp:send(MESSAGE))
		
		local body = assert(tcp:receive("*a"))
		assert.equal(MESSAGE, body)
		
		tcp:close()
		
		-- Getting back the TCP server input
		local ok, res = thread:join()
		assert.True(ok)
		assert.is_string(res)
		
		-- Making sure it's alright
		local log_message = cjson.decode(res)
		
		assert.equal("127.0.0.1", log_message.client_ip)
		assert.is_table(log_message.latencies)
		
		assert.equal(200, log_message.session.status)
		assert.equal(#MESSAGE, log_message.session.sent)
		assert.equal(#MESSAGE, log_message.session.received)
		
		assert.is_number(log_message.started_at)
		
		assert.is_table(log_message.route)
		assert.is_table(log_message.service)
		assert.is_table(log_message.tries)
		assert.is_table(log_message.upstream)
		end)
		
		it("#stream reports tls streams", function()
		local thread = helpers.tcp_server(TCP_PORT) -- Starting the mock TCP server
		
		local tcp = ngx.socket.tcp()
		
		assert(tcp:connect(helpers.get_proxy_ip(true), 19443))
		
		assert(tcp:sslhandshake(nil, "this-is-needed.test", false))
		
		assert(tcp:send(MESSAGE))
		
		local body = assert(tcp:receive("*a"))
		assert.equal(MESSAGE, body)
		
		tcp:close()
		
		-- Getting back the TCP server input
		local ok, res = thread:join()
		assert.True(ok)
		assert.is_string(res)
		
		-- Making sure it's alright
		local log_message = cjson.decode(res)
		
		assert.is_string(log_message.session.tls.cipher)
		assert.equal("NONE", log_message.session.tls.client_verify)
		assert.is_string(log_message.session.tls.version)
		end)
		end)
		
		end
