require "kong.tools.ngx_stub"

local jwt_parser = require "kong.plugins.jwt.jwt_parser"
local fixtures = require "spec.plugins.jwt.fixtures"

describe("JWT parser", function()
  describe("Encoding", function()
    it("should properly encode using HS256", function()
      local token = jwt_parser.encode({
        sub = "1234567890",
        name = "John Doe",
        admin = true
      }, "secret")
      assert.equal("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwibmFtZSI6IkpvaG4gRG9lIiwic3ViIjoiMTIzNDU2Nzg5MCJ9.eNK_fimsCW3Q-meOXyc_dnZHubl2D4eZkIcn6llniCk", token)
    end)
    it("should properly encode using RS256", function()
      local token = jwt_parser.encode({
        sub = "1234567890",
        name = "John Doe",
        admin = true
      }, fixtures.rs256_private_key, 'RS256')
      assert.equal("eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6dHJ1ZSwibmFtZSI6IkpvaG4gRG9lIiwic3ViIjoiMTIzNDU2Nzg5MCJ9.EiOLxyMimY8vbLR8EcGOlXAiEe-eEVn7Aewgu0gYIBPyiEhVTq0CzB_XtHoQ_0y4gBBBZVRnz1pgruOtNmOzcaoXnyplFm1IbrCCBKYQeA4lanmu_-Wzk6Dw4p-TimRHpf8EEHBUJSEbVEyet3cpozUo2Ep0dEfA_Nf3T-g8RjfOYXkFTr3M6FuIDq95cFZloH-DRGodUVQX508wgggtcFKN-Pi7_rWzBtQwP2u4CrFD4ZJbn2sxobzSlFb9fn4nRh_-rPPjDSeHVKwrpsYpFSLBJxwX-KhbeGUfalg2eu9tHLDPHC4gTCpoQKxxRIwfMjW5zlHOZhohKZV2ZtpcgA", token)
    end)
  end)
  describe("Decoding", function()
    it("should throw an error if not given a string", function()
      assert.has_error(function()
        jwt_parser:new()
      end, "JWT must be a string")
    end)
    it("should refuse invalid typ", function()
      local token = jwt_parser.encode({sub = "1234"}, "secret", nil, {typ = "foo"})
      local _, err = jwt_parser:new(token)
      assert.equal("Invalid typ", err)
    end)
    it("should refuse invalid alg", function()
      local token = jwt_parser.encode({sub = "1234"}, "secret", nil, {typ = "JWT", alg = "foo"})
      local _, err = jwt_parser:new(token)
      assert.equal("Invalid alg", err)
    end)
    it("should accept a valid encoding request", function()
      local token = jwt_parser.encode({sub = "1234"}, "secret", nil, {typ = "JWT", alg = "RS256"})
      local res, err = jwt_parser:new(token)
      assert.falsy(err)
      assert.truthy(res)
    end)
    it("should accept a valid encoding request with lowercase TYP", function()
      local token = jwt_parser.encode({sub = "1234"}, "secret", nil, {typ = "jwt", alg = "RS256"})
      local res, err = jwt_parser:new(token)
      assert.falsy(err)
      assert.truthy(res)
    end)
    it("should accept a valid encoding request with missing TYP", function()
      local token = jwt_parser.encode({sub = "1234"}, "secret", nil, {alg = "RS256"})
      local res, err = jwt_parser:new(token)
      assert.falsy(err)
      assert.truthy(res)
    end)
  end)
  describe("Verify signature", function()
    it("should verify a signature using HS256", function()
      local token = jwt_parser.encode({sub = "foo"}, "secret")
      local jwt, err = jwt_parser:new(token)
      assert.falsy(err)
      assert.True(jwt:verify_signature("secret"))
      assert.False(jwt:verify_signature("invalid"))
    end)
    it("should verify a signature using RS256", function()
      local token = jwt_parser.encode({sub = "foo"}, fixtures.rs256_private_key, 'RS256')
      local jwt, err = jwt_parser:new(token)
      assert.falsy(err)
      assert.True(jwt:verify_signature(fixtures.rs256_public_key))
      assert.False(jwt:verify_signature(fixtures.rs256_public_key:gsub('QAB', 'zzz')))
    end)
  end)
  describe("Verify registered claims", function()
    it("should require claims passed as arguments", function()
      local token = jwt_parser.encode({sub = "foo"}, "secret")
      local jwt, err = jwt_parser:new(token)
      assert.falsy(err)
      local valid, errors = jwt:verify_registered_claims({"exp", "nbf"})
      assert.False(valid)
      assert.same({exp = "must be a number", nbf = "must be a number"}, errors)

      valid, errors = jwt:verify_registered_claims({"nbf"})
      assert.False(valid)
      assert.same({nbf = "must be a number"}, errors)
    end)
    it("should check the type of given registered claims", function()
      local token = jwt_parser.encode({exp = "bar", nbf = "foo"}, "secret")
      local jwt, err = jwt_parser:new(token)
      assert.falsy(err)
      local valid, errors = jwt:verify_registered_claims({"exp", "nbf"})
      assert.False(valid)
      assert.same({exp = "must be a number", nbf = "must be a number"}, errors)
    end)
    it("should check the exp claim", function()
      local token = jwt_parser.encode({exp = os.time()}, "secret")
      local jwt, err = jwt_parser:new(token)
      assert.falsy(err)
      local valid, errors = jwt:verify_registered_claims({"exp"})
      assert.False(valid)
      assert.same({exp = "token expired"}, errors)
    end)
    it("should check the nbf claim", function()
      local token = jwt_parser.encode({nbf = os.time() + 10}, "secret")
      local jwt, err = jwt_parser:new(token)
      assert.falsy(err)
      local valid, errors = jwt:verify_registered_claims({"nbf"})
      assert.False(valid)
      assert.same({nbf = "token not valid yet"}, errors)
    end)
  end)
end)
