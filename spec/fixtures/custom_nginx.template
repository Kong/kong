# This is a custom nginx configuration template for Kong specs

> if nginx_user then
user ${{NGINX_USER}};
> end
worker_processes ${{NGINX_WORKER_PROCESSES}};
daemon ${{NGINX_DAEMON}};

pid pids/nginx.pid; # mandatory even for custom config templates
error_log logs/error.log ${{LOG_LEVEL}};

events {}

http {
    charset UTF-8;

    error_log logs/error.log ${{LOG_LEVEL}};

> if anonymous_reports then
    ${{SYSLOG_REPORTS}}
> end

> if nginx_optimizations then
>-- send_timeout 60s;          # default value
>-- keepalive_timeout 75s;     # default value
>-- client_body_timeout 60s;   # default value
>-- client_header_timeout 60s; # default value
>-- tcp_nopush on;             # disabled until benchmarked
>-- proxy_buffer_size 128k;    # disabled until benchmarked
>-- proxy_buffers 4 256k;      # disabled until benchmarked
>-- proxy_busy_buffers_size 256k; # disabled until benchmarked
>-- reset_timedout_connection on; # disabled until benchmarked
> end

    client_max_body_size ${{CLIENT_MAX_BODY_SIZE}};
    proxy_ssl_server_name on;
    underscores_in_headers on;

    lua_package_path '${{LUA_PACKAGE_PATH}};;';
    lua_package_cpath '${{LUA_PACKAGE_CPATH}};;';
    lua_code_cache ${{LUA_CODE_CACHE}};
    lua_socket_pool_size ${{LUA_SOCKET_POOL_SIZE}};
    lua_max_running_timers 4096;
    lua_max_pending_timers 16384;
    lua_shared_dict kong                5m;
    lua_shared_dict kong_cache          ${{MEM_CACHE_SIZE}};
    lua_shared_dict kong_process_events 5m;
    lua_shared_dict kong_cluster_events 5m;
> if database == "cassandra" then
    lua_shared_dict kong_cassandra      5m;
> end
    lua_socket_log_errors off;
> if lua_ssl_trusted_certificate then
    lua_ssl_trusted_certificate '${{LUA_SSL_TRUSTED_CERTIFICATE}}';
    lua_ssl_verify_depth ${{LUA_SSL_VERIFY_DEPTH}};
> end

    init_by_lua_block {
        require 'resty.core'
        kong = require 'kong'
        kong.init()
    }

    init_worker_by_lua_block {
        kong.init_worker()
    }

    proxy_next_upstream_tries 999;

    upstream kong_upstream {
        server 0.0.0.1;
        balancer_by_lua_block {
            kong.balancer()
        }
        keepalive ${{UPSTREAM_KEEPALIVE}};
    }

    server {
        server_name kong;
> if real_ip_header == "proxy_protocol" then
        listen ${{PROXY_LISTEN}} proxy_protocol;
> else
        listen ${{PROXY_LISTEN}};
> end
        error_page 400 404 408 411 412 413 414 417 /kong_error_handler;
        error_page 500 502 503 504 /kong_error_handler;

        access_log logs/access.log;

        client_body_buffer_size ${{CLIENT_BODY_BUFFER_SIZE}};

> if ssl then
> if real_ip_header == "proxy_protocol" then
        listen ${{PROXY_LISTEN_SSL}} proxy_protocol ssl;
> else
        listen ${{PROXY_LISTEN_SSL}} ssl;
> end
        ssl_certificate ${{SSL_CERT}};
        ssl_certificate_key ${{SSL_CERT_KEY}};
        ssl_protocols TLSv1.1 TLSv1.2;
        ssl_certificate_by_lua_block {
            kong.ssl_certificate()
        }
> end

        real_ip_header     ${{REAL_IP_HEADER}};
        real_ip_recursive  ${{REAL_IP_RECURSIVE}};
> for i = 1, #trusted_ips do
        set_real_ip_from   $(trusted_ips[i]);
> end

        location / {
            set $upstream_host               '';
            set $upstream_upgrade            '';
            set $upstream_connection         '';
            set $upstream_scheme             '';
            set $upstream_uri                '';
            set $upstream_host               '';
            set $upstream_x_forwarded_for    '';
            set $upstream_x_forwarded_proto  '';
            set $upstream_x_forwarded_host   '';
            set $upstream_x_forwarded_port   '';

            access_by_lua_block {
                kong.access()
            }

            proxy_http_version 1.1;
            proxy_set_header   Host              $upstream_host;
            proxy_set_header   Upgrade           $upstream_upgrade;
            proxy_set_header   Connection        $upstream_connection;
            proxy_set_header   X-Forwarded-For   $upstream_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $upstream_x_forwarded_proto;
            proxy_set_header   X-Forwarded-Host  $upstream_x_forwarded_host;
            proxy_set_header   X-Forwarded-Port  $upstream_x_forwarded_port;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_pass_header  Server;
            proxy_pass_header  Date;
            proxy_ssl_name     $upstream_host;
            proxy_pass         $upstream_scheme://kong_upstream$upstream_uri;

            header_filter_by_lua_block {
                kong.header_filter()
            }

            body_filter_by_lua_block {
                kong.body_filter()
            }

            log_by_lua_block {
                kong.log()
            }
        }

        location = /kong_error_handler {
            internal;
            content_by_lua_block {
                require('kong.core.error_handlers')(ngx)
            }
        }
    }

    server {
        server_name kong_admin;
        listen ${{ADMIN_LISTEN}};

        access_log logs/admin_access.log;

        client_max_body_size 10m;
        client_body_buffer_size 10m;

> if admin_ssl then
        listen ${{ADMIN_LISTEN_SSL}} ssl;
        ssl_certificate ${{ADMIN_SSL_CERT}};
        ssl_certificate_key ${{ADMIN_SSL_CERT_KEY}};
        ssl_protocols TLSv1.1 TLSv1.2;
> end

        location / {
            default_type application/json;
            content_by_lua_block {
                ngx.header['Access-Control-Allow-Origin'] = '*'
                ngx.header['Access-Control-Allow-Credentials'] = 'false'
                if ngx.req.get_method() == 'OPTIONS' then
                    ngx.header['Access-Control-Allow-Methods'] = 'GET,HEAD,PUT,PATCH,POST,DELETE'
                    ngx.header['Access-Control-Allow-Headers'] = 'Content-Type'
                    ngx.exit(204)
                end

                require('kong-lapis').serve('kong.api')
            }
        }

        location /nginx_status {
            internal;
            access_log off;
            stub_status;
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }
    }

    server {
        server_name custom_server;
        listen 9999;
        listen 10001 ssl;

        ssl_certificate ${{SSL_CERT}};
        ssl_certificate_key ${{SSL_CERT_KEY}};
        ssl_protocols TLSv1.1 TLSv1.2;

        location /custom_server_path {
            return 200;
        }

        location / {
            content_by_lua_block {
                local cjson = require "cjson"
                local var   = ngx.var
                local req   = ngx.req

                req.read_body()

                local json = cjson.encode {
                    vars = {
                        uri                = var.uri,
                        host               = var.host,
                        hostname           = var.hostname,
                        https              = var.https,
                        scheme             = var.scheme,
                        is_args            = var.is_args,
                        server_addr        = var.server_addr,
                        server_port        = var.server_port,
                        server_name        = var.server_name,
                        server_protocol    = var.server_protocol,
                        remote_addr        = var.remote_addr,
                        remote_port        = var.remote_port,
                        realip_remote_addr = var.realip_remote_addr,
                        realip_remote_port = var.realip_remote_port,
                        binary_remote_addr = var.binary_remote_addr,
                        request            = var.request,
                        request_uri        = var.request_uri,
                        request_time       = var.request_time,
                        request_length     = var.request_length,
                        request_method     = var.request_method,
                        bytes_received     = var.bytes_received,
                    },
                    method       = req.get_method(),
                    headers      = req.get_headers(0),
                    uri_args     = req.get_uri_args(0),
                    post_args    = req.get_post_args(0),
                    http_version = req.http_version(),
                }

                ngx.status = 200
                ngx.say(json)
                ngx.exit(200)
            }
        }

        location /headers-inspect {
            content_by_lua_block {
                local cjson = require "cjson"

                local headers = ngx.req.get_headers()
                local json = cjson.encode(headers)

                ngx.status = 200
                ngx.say(json)
                ngx.exit(200)
            }
        }

        # N.B. this fixture only exists because the current testing environment
        # offers no other tenable method to inspect the upstream TLS handshake
        # this fixture SHOULD NOT be used in the future to build further tests;
        # the location blocks here must be treated as temporary exceptions, not
        # an acceptable pattern on which to derive further test architectures
        location /ssl-inspect {
            content_by_lua_block {
                local name = ngx.var.ssl_server_name and ngx.var.ssl_server_name
                  or "no SNI"

                ngx.say(name)
            }
        }

        location ~ "/2015-03-31/functions/(?:[^/])*/invocations" {
            content_by_lua_block {
                local function say(res, status)
                  ngx.header["x-amzn-RequestId"] = "foo"
                  if string.match(ngx.var.uri, "functionWithUnhandledError") then
                    ngx.header["X-Amzn-Function-Error"] = "Unhandled"
                  end
                  ngx.status = status

                  if type(res) == 'string' then
                    ngx.header["Content-Length"] = #res + 1
                    ngx.say(res)

                  else
                    ngx.req.discard_body()
                    ngx.header['Content-Length'] = 0
                  end

                  ngx.exit(0)
                end

                ngx.sleep(.2) -- mock some network latency

                local invocation_type = ngx.var.http_x_amz_invocation_type
                if invocation_type == 'Event' then
                  say(nil, 202)

                elseif invocation_type == 'DryRun' then
                  say(nil, 204)
                end

                local qargs = ngx.req.get_uri_args()
                ngx.req.read_body()
                local args = require("cjson").decode(ngx.req.get_body_data())

                say(string.format("%q", qargs.key1 or args.key1), 200)
            }
        }
    }
}
