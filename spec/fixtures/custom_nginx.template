# This is a custom nginx configuration template for Kong specs

> if nginx_user then
user ${{NGINX_USER}};
> end
worker_processes ${{NGINX_WORKER_PROCESSES}};
daemon ${{NGINX_DAEMON}};

pid pids/nginx.pid; # mandatory even for custom config templates
error_log logs/error.log ${{LOG_LEVEL}};

events {}

http {
    charset UTF-8;

    error_log logs/error.log ${{LOG_LEVEL}};

> if anonymous_reports then
    ${{SYSLOG_REPORTS}}
> end

> if nginx_optimizations then
>-- send_timeout 60s;          # default value
>-- keepalive_timeout 75s;     # default value
>-- client_body_timeout 60s;   # default value
>-- client_header_timeout 60s; # default value
>-- tcp_nopush on;             # disabled until benchmarked
>-- proxy_buffer_size 128k;    # disabled until benchmarked
>-- proxy_buffers 4 256k;      # disabled until benchmarked
>-- proxy_busy_buffers_size 256k; # disabled until benchmarked
>-- reset_timedout_connection on; # disabled until benchmarked
> end

    client_max_body_size ${{CLIENT_MAX_BODY_SIZE}};
    proxy_ssl_server_name on;
    underscores_in_headers on;

    lua_package_path '${{LUA_PACKAGE_PATH}};;';
    lua_package_cpath '${{LUA_PACKAGE_CPATH}};;';
    lua_socket_pool_size ${{LUA_SOCKET_POOL_SIZE}};
    lua_max_running_timers 4096;
    lua_max_pending_timers 16384;
    lua_shared_dict kong                5m;
    lua_shared_dict kong_db_cache       ${{MEM_CACHE_SIZE}};
    lua_shared_dict kong_db_cache_miss 12m;
    lua_shared_dict kong_process_events 5m;
    lua_shared_dict kong_cluster_events 5m;
    lua_shared_dict kong_healthchecks   5m;
> if database == "cassandra" then
    lua_shared_dict kong_cassandra      5m;
> end
    lua_socket_log_errors off;
> if lua_ssl_trusted_certificate then
    lua_ssl_trusted_certificate '${{LUA_SSL_TRUSTED_CERTIFICATE}}';
    lua_ssl_verify_depth ${{LUA_SSL_VERIFY_DEPTH}};
> end

    init_by_lua_block {
        kong = require 'kong'
        kong.init()
    }

    init_worker_by_lua_block {
        kong.init_worker()
    }

> if #proxy_listeners > 0 then
    upstream kong_upstream {
        server 0.0.0.1;
        balancer_by_lua_block {
            kong.balancer()
        }
        keepalive ${{UPSTREAM_KEEPALIVE}};
    }

    server {
        server_name kong;
> for i = 1, #proxy_listeners do
        listen $(proxy_listeners[i].listener);
> end
        error_page 400 404 408 411 412 413 414 417 /kong_error_handler;
        error_page 500 502 503 504 /kong_error_handler;

        access_log logs/access.log;

        client_body_buffer_size ${{CLIENT_BODY_BUFFER_SIZE}};

> if proxy_ssl_enabled then
        ssl_certificate ${{SSL_CERT}};
        ssl_certificate_key ${{SSL_CERT_KEY}};
        ssl_protocols TLSv1.1 TLSv1.2;
        ssl_certificate_by_lua_block {
            kong.ssl_certificate()
        }
> end

        real_ip_header     ${{REAL_IP_HEADER}};
        real_ip_recursive  ${{REAL_IP_RECURSIVE}};
> for i = 1, #trusted_ips do
        set_real_ip_from   $(trusted_ips[i]);
> end

        location / {
            set $upstream_host               '';
            set $upstream_upgrade            '';
            set $upstream_connection         '';
            set $upstream_scheme             '';
            set $upstream_uri                '';
            set $upstream_x_forwarded_for    '';
            set $upstream_x_forwarded_proto  '';
            set $upstream_x_forwarded_host   '';
            set $upstream_x_forwarded_port   '';

            rewrite_by_lua_block {
                kong.rewrite()
            }

            access_by_lua_block {
                kong.access()
            }

            proxy_http_version 1.1;
            proxy_set_header   Host              $upstream_host;
            proxy_set_header   Upgrade           $upstream_upgrade;
            proxy_set_header   Connection        $upstream_connection;
            proxy_set_header   X-Forwarded-For   $upstream_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $upstream_x_forwarded_proto;
            proxy_set_header   X-Forwarded-Host  $upstream_x_forwarded_host;
            proxy_set_header   X-Forwarded-Port  $upstream_x_forwarded_port;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_pass_header  Server;
            proxy_pass_header  Date;
            proxy_ssl_name     $upstream_host;
            proxy_pass         $upstream_scheme://kong_upstream$upstream_uri;

            header_filter_by_lua_block {
                kong.header_filter()
            }

            body_filter_by_lua_block {
                kong.body_filter()
            }

            log_by_lua_block {
                kong.log()
            }
        }

        location = /kong_error_handler {
            internal;
            content_by_lua_block {
                kong.handle_error()
            }
        }
    }
> end

> if #admin_listeners > 0 then
    server {
        server_name kong_admin;
> for i = 1, #admin_listeners do
        listen $(admin_listeners[i].listener);
> end

        access_log logs/admin_access.log;

        client_max_body_size 10m;
        client_body_buffer_size 10m;

> if admin_ssl_enabled then
        ssl_certificate ${{ADMIN_SSL_CERT}};
        ssl_certificate_key ${{ADMIN_SSL_CERT_KEY}};
        ssl_protocols TLSv1.1 TLSv1.2;
> end

        location / {
            default_type application/json;
            content_by_lua_block {
                kong.serve_admin_api()
            }
        }

        location /nginx_status {
            internal;
            access_log off;
            stub_status;
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }
    }
> end

    server {
        server_name mock_aws_lambda;
        listen 10001 ssl;

        ssl_certificate ${{SSL_CERT}};
        ssl_certificate_key ${{SSL_CERT_KEY}};
        ssl_protocols TLSv1.1 TLSv1.2;

        location ~ "/2015-03-31/functions/(?:[^/])*/invocations" {
            content_by_lua_block {
                local function say(res, status)
                  ngx.header["x-amzn-RequestId"] = "foo"
                  if string.match(ngx.var.uri, "functionWithUnhandledError") then
                    ngx.header["X-Amz-Function-Error"] = "Unhandled"
                  end
                  ngx.status = status

                  if type(res) == 'string' then
                    ngx.header["Content-Length"] = #res + 1
                    ngx.say(res)

                  else
                    ngx.req.discard_body()
                    ngx.header['Content-Length'] = 0
                  end

                  ngx.exit(0)
                end

                ngx.sleep(.2) -- mock some network latency

                local invocation_type = ngx.var.http_x_amz_invocation_type
                if invocation_type == 'Event' then
                  say(nil, 202)

                elseif invocation_type == 'DryRun' then
                  say(nil, 204)
                end

                local qargs = ngx.req.get_uri_args()
                ngx.req.read_body()
                local args = require("cjson").decode(ngx.req.get_body_data())

                say(ngx.req.get_body_data(), 200)
            }
        }
    }

    server {
        server_name mock_upstream;

        listen 15555;
        listen 15556 ssl;

        ssl_certificate ${{SSL_CERT}};
        ssl_certificate_key ${{SSL_CERT_KEY}};
        ssl_protocols TLSv1.1 TLSv1.2;

        set_real_ip_from 127.0.0.1;

        location = / {
            content_by_lua_block {
                local mu = require "spec.fixtures.mock_upstream"
                return mu.send_default_json_response({
                    valid_routes = {
                        ["/ws"]                         = "Websocket echo server",
                        ["/get"]                        = "Accepts a GET request and returns it in JSON format",
                        ["/post"]                       = "Accepts a POST request and returns it in JSON format",
                        ["/response-headers?:key=:val"] = "Returns given response headers",
                        ["/anything"]                   = "Accepts any request and returns it in JSON format",
                        ["/request"]                    = "Alias to /anything",
                        ["/delay/:duration"]            = "Delay the response for <duration> seconds",
                        ["/basic-auth/:user/:pass"]     = "Performs HTTP basic authentication with the given credentials",
                        ["/status/:code"]               = "Returns a response with the specified <status code>",
                        ["/stream/:num"]                = "Stream <num> chunks of JSON data via chunked Transfer Encoding",
                    },
                })
            }
        }

        location = /ws {
            content_by_lua_block {
                local mu = require "spec.fixtures.mock_upstream"
                return mu.serve_web_sockets()
            }
        }

        location /get {
            access_by_lua_block {
                local mu = require "spec.fixtures.mock_upstream"
                return mu.filter_access_by_method("GET")
            }
            content_by_lua_block {
                local mu = require "spec.fixtures.mock_upstream"
                return mu.send_default_json_response()
            }
        }

        location /post {
            access_by_lua_block {
                local mu = require "spec.fixtures.mock_upstream"
                return mu.filter_access_by_method("POST")
            }
            content_by_lua_block {
                local mu = require "spec.fixtures.mock_upstream"
                return mu.send_default_json_response()
            }
        }

        location = /response-headers {
            access_by_lua_block {
                local mu = require "spec.fixtures.mock_upstream"
                return mu.filter_access_by_method("GET")
            }
            content_by_lua_block {
                local mu = require "spec.fixtures.mock_upstream"
                return mu.send_default_json_response({}, ngx.req.get_uri_args())
            }
        }

        location ~ "^/basic-auth/(?<username>[a-zA-Z0-9_]+)/(?<password>.+)$" {
            access_by_lua_block {
                local mu = require "spec.fixtures.mock_upstream"
                return mu.filter_access_by_basic_auth(ngx.var.username,
                                                      ngx.var.password)
            }
            content_by_lua_block {
                local mu = require "spec.fixtures.mock_upstream"
                return mu.send_default_json_response({
                    authenticated = true,
                    user          = ngx.var.username,
                })
            }
        }

        location ~ "^/(request|anything)" {
            content_by_lua_block {
                local mu = require "spec.fixtures.mock_upstream"
                return mu.send_default_json_response()
            }
        }

        location ~ "^/delay/(?<delay_seconds>\d{1,3})$" {
            content_by_lua_block {
                local mu            = require "spec.fixtures.mock_upstream"
                local delay_seconds = tonumber(ngx.var.delay_seconds)
                if not delay_seconds then
                    return ngx.exit(ngx.HTTP_NOT_FOUND)
                end

                ngx.sleep(delay_seconds)

                return mu.send_default_json_response({
                    delay = delay_seconds,
                })
            }
        }

        location ~ "^/status/(?<code>\d{3})$" {
            content_by_lua_block {
                local mu   = require "spec.fixtures.mock_upstream"
                local code = tonumber(ngx.var.code)
                if not code then
                    return ngx.exit(ngx.HTTP_NOT_FOUND)
                end
                ngx.status = code
                return mu.send_default_json_response({
                  code = code,
                })
            }
        }

        location ~ "^/stream/(?<num>\d+)$" {
            content_by_lua_block {
                local mu  = require "spec.fixtures.mock_upstream"
                local rep = tonumber(ngx.var.num)
                local res = require("cjson").encode(mu.get_default_json_response())

                ngx.header["X-Powered-By"] = "mock_upstream"
                ngx.header["Content-Type"] = "application/json"

                for i = 1, rep do
                  ngx.say(res)
                end
            }
        }
    }
}
