// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.23.3
// source: targetservice.proto

package targetservice

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Foo int32

const (
	Foo_FOO_UNSPECIFIED   Foo = 0
	Foo_FOO_COMPLEX_NAME  Foo = 1
	Foo_FOO_ANOTHER_VALUE Foo = 2
)

// Enum value maps for Foo.
var (
	Foo_name = map[int32]string{
		0: "FOO_UNSPECIFIED",
		1: "FOO_COMPLEX_NAME",
		2: "FOO_ANOTHER_VALUE",
	}
	Foo_value = map[string]int32{
		"FOO_UNSPECIFIED":   0,
		"FOO_COMPLEX_NAME":  1,
		"FOO_ANOTHER_VALUE": 2,
	}
)

func (x Foo) Enum() *Foo {
	p := new(Foo)
	*p = x
	return p
}

func (x Foo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Foo) Descriptor() protoreflect.EnumDescriptor {
	return file_targetservice_proto_enumTypes[0].Descriptor()
}

func (Foo) Type() protoreflect.EnumType {
	return &file_targetservice_proto_enumTypes[0]
}

func (x Foo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Foo.Descriptor instead.
func (Foo) EnumDescriptor() ([]byte, []int) {
	return file_targetservice_proto_rawDescGZIP(), []int{0}
}

type HelloRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Greeting    string `protobuf:"bytes,1,opt,name=greeting,proto3" json:"greeting,omitempty"`
	BooleanTest bool   `protobuf:"varint,2,opt,name=boolean_test,json=booleanTest,proto3" json:"boolean_test,omitempty"`
}

func (x *HelloRequest) Reset() {
	*x = HelloRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targetservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloRequest) ProtoMessage() {}

func (x *HelloRequest) ProtoReflect() protoreflect.Message {
	mi := &file_targetservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloRequest.ProtoReflect.Descriptor instead.
func (*HelloRequest) Descriptor() ([]byte, []int) {
	return file_targetservice_proto_rawDescGZIP(), []int{0}
}

func (x *HelloRequest) GetGreeting() string {
	if x != nil {
		return x.Greeting
	}
	return ""
}

func (x *HelloRequest) GetBooleanTest() bool {
	if x != nil {
		return x.BooleanTest
	}
	return false
}

type HelloResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply       string `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	BooleanTest bool   `protobuf:"varint,2,opt,name=boolean_test,json=booleanTest,proto3" json:"boolean_test,omitempty"`
}

func (x *HelloResponse) Reset() {
	*x = HelloResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targetservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloResponse) ProtoMessage() {}

func (x *HelloResponse) ProtoReflect() protoreflect.Message {
	mi := &file_targetservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloResponse.ProtoReflect.Descriptor instead.
func (*HelloResponse) Descriptor() ([]byte, []int) {
	return file_targetservice_proto_rawDescGZIP(), []int{1}
}

func (x *HelloResponse) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

func (x *HelloResponse) GetBooleanTest() bool {
	if x != nil {
		return x.BooleanTest
	}
	return false
}

type BounceGoodTimesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	When         *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=when,proto3" json:"when,omitempty"`
	Now          *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=now,proto3" json:"now,omitempty"`
	Postponement *durationpb.Duration   `protobuf:"bytes,3,opt,name=postponement,proto3" json:"postponement,omitempty"`
}

func (x *BounceGoodTimesRequest) Reset() {
	*x = BounceGoodTimesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targetservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BounceGoodTimesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BounceGoodTimesRequest) ProtoMessage() {}

func (x *BounceGoodTimesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_targetservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BounceGoodTimesRequest.ProtoReflect.Descriptor instead.
func (*BounceGoodTimesRequest) Descriptor() ([]byte, []int) {
	return file_targetservice_proto_rawDescGZIP(), []int{2}
}

func (x *BounceGoodTimesRequest) GetWhen() *timestamppb.Timestamp {
	if x != nil {
		return x.When
	}
	return nil
}

func (x *BounceGoodTimesRequest) GetNow() *timestamppb.Timestamp {
	if x != nil {
		return x.Now
	}
	return nil
}

func (x *BounceGoodTimesRequest) GetPostponement() *durationpb.Duration {
	if x != nil {
		return x.Postponement
	}
	return nil
}

type BounceGoodTimesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Now        *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=now,proto3" json:"now,omitempty"`
	NewWhen    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=new_when,json=newWhen,proto3" json:"new_when,omitempty"`
	TotalDelay *durationpb.Duration   `protobuf:"bytes,3,opt,name=total_delay,json=totalDelay,proto3" json:"total_delay,omitempty"`
}

func (x *BounceGoodTimesResponse) Reset() {
	*x = BounceGoodTimesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targetservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BounceGoodTimesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BounceGoodTimesResponse) ProtoMessage() {}

func (x *BounceGoodTimesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_targetservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BounceGoodTimesResponse.ProtoReflect.Descriptor instead.
func (*BounceGoodTimesResponse) Descriptor() ([]byte, []int) {
	return file_targetservice_proto_rawDescGZIP(), []int{3}
}

func (x *BounceGoodTimesResponse) GetNow() *timestamppb.Timestamp {
	if x != nil {
		return x.Now
	}
	return nil
}

func (x *BounceGoodTimesResponse) GetNewWhen() *timestamppb.Timestamp {
	if x != nil {
		return x.NewWhen
	}
	return nil
}

func (x *BounceGoodTimesResponse) GetTotalDelay() *durationpb.Duration {
	if x != nil {
		return x.TotalDelay
	}
	return nil
}

type BounceMaskedFieldsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComplexValue *ComplexType           `protobuf:"bytes,1,opt,name=complex_value,json=complexValue,proto3" json:"complex_value,omitempty"`
	FieldMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *BounceMaskedFieldsRequest) Reset() {
	*x = BounceMaskedFieldsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targetservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BounceMaskedFieldsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BounceMaskedFieldsRequest) ProtoMessage() {}

func (x *BounceMaskedFieldsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_targetservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BounceMaskedFieldsRequest.ProtoReflect.Descriptor instead.
func (*BounceMaskedFieldsRequest) Descriptor() ([]byte, []int) {
	return file_targetservice_proto_rawDescGZIP(), []int{4}
}

func (x *BounceMaskedFieldsRequest) GetComplexValue() *ComplexType {
	if x != nil {
		return x.ComplexValue
	}
	return nil
}

func (x *BounceMaskedFieldsRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type BounceMaskedFieldsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComplexValue *ComplexType `protobuf:"bytes,1,opt,name=complex_value,json=complexValue,proto3" json:"complex_value,omitempty"`
}

func (x *BounceMaskedFieldsResponse) Reset() {
	*x = BounceMaskedFieldsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targetservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BounceMaskedFieldsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BounceMaskedFieldsResponse) ProtoMessage() {}

func (x *BounceMaskedFieldsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_targetservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BounceMaskedFieldsResponse.ProtoReflect.Descriptor instead.
func (*BounceMaskedFieldsResponse) Descriptor() ([]byte, []int) {
	return file_targetservice_proto_rawDescGZIP(), []int{5}
}

func (x *BounceMaskedFieldsResponse) GetComplexValue() *ComplexType {
	if x != nil {
		return x.ComplexValue
	}
	return nil
}

type BallIn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	When    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=when,proto3" json:"when,omitempty"`
	Now     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=now,proto3" json:"now,omitempty"`
}

func (x *BallIn) Reset() {
	*x = BallIn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targetservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BallIn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BallIn) ProtoMessage() {}

func (x *BallIn) ProtoReflect() protoreflect.Message {
	mi := &file_targetservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BallIn.ProtoReflect.Descriptor instead.
func (*BallIn) Descriptor() ([]byte, []int) {
	return file_targetservice_proto_rawDescGZIP(), []int{6}
}

func (x *BallIn) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BallIn) GetWhen() *timestamppb.Timestamp {
	if x != nil {
		return x.When
	}
	return nil
}

func (x *BallIn) GetNow() *timestamppb.Timestamp {
	if x != nil {
		return x.Now
	}
	return nil
}

type BallOut struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reply       string                 `protobuf:"bytes,1,opt,name=reply,proto3" json:"reply,omitempty"`
	TimeMessage string                 `protobuf:"bytes,2,opt,name=time_message,json=timeMessage,proto3" json:"time_message,omitempty"`
	Now         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=now,proto3" json:"now,omitempty"`
}

func (x *BallOut) Reset() {
	*x = BallOut{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targetservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BallOut) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BallOut) ProtoMessage() {}

func (x *BallOut) ProtoReflect() protoreflect.Message {
	mi := &file_targetservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BallOut.ProtoReflect.Descriptor instead.
func (*BallOut) Descriptor() ([]byte, []int) {
	return file_targetservice_proto_rawDescGZIP(), []int{7}
}

func (x *BallOut) GetReply() string {
	if x != nil {
		return x.Reply
	}
	return ""
}

func (x *BallOut) GetTimeMessage() string {
	if x != nil {
		return x.TimeMessage
	}
	return ""
}

func (x *BallOut) GetNow() *timestamppb.Timestamp {
	if x != nil {
		return x.Now
	}
	return nil
}

type Limb struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count   int32  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Endings string `protobuf:"bytes,2,opt,name=endings,proto3" json:"endings,omitempty"`
}

func (x *Limb) Reset() {
	*x = Limb{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targetservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Limb) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Limb) ProtoMessage() {}

func (x *Limb) ProtoReflect() protoreflect.Message {
	mi := &file_targetservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Limb.ProtoReflect.Descriptor instead.
func (*Limb) Descriptor() ([]byte, []int) {
	return file_targetservice_proto_rawDescGZIP(), []int{8}
}

func (x *Limb) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *Limb) GetEndings() string {
	if x != nil {
		return x.Endings
	}
	return ""
}

type Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Hands *Limb  `protobuf:"bytes,2,opt,name=hands,proto3" json:"hands,omitempty"`
	Legs  *Limb  `protobuf:"bytes,3,opt,name=legs,proto3" json:"legs,omitempty"`
	Tail  *Limb  `protobuf:"bytes,4,opt,name=tail,proto3" json:"tail,omitempty"`
}

func (x *Body) Reset() {
	*x = Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targetservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body) ProtoMessage() {}

func (x *Body) ProtoReflect() protoreflect.Message {
	mi := &file_targetservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body.ProtoReflect.Descriptor instead.
func (*Body) Descriptor() ([]byte, []int) {
	return file_targetservice_proto_rawDescGZIP(), []int{9}
}

func (x *Body) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Body) GetHands() *Limb {
	if x != nil {
		return x.Hands
	}
	return nil
}

func (x *Body) GetLegs() *Limb {
	if x != nil {
		return x.Legs
	}
	return nil
}

func (x *Body) GetTail() *Limb {
	if x != nil {
		return x.Tail
	}
	return nil
}

type EchoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Array    []string `protobuf:"bytes,1,rep,name=array,proto3" json:"array,omitempty"`
	Nullable string   `protobuf:"bytes,2,opt,name=nullable,proto3" json:"nullable,omitempty"`
}

func (x *EchoMsg) Reset() {
	*x = EchoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targetservice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EchoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EchoMsg) ProtoMessage() {}

func (x *EchoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_targetservice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EchoMsg.ProtoReflect.Descriptor instead.
func (*EchoMsg) Descriptor() ([]byte, []int) {
	return file_targetservice_proto_rawDescGZIP(), []int{10}
}

func (x *EchoMsg) GetArray() []string {
	if x != nil {
		return x.Array
	}
	return nil
}

func (x *EchoMsg) GetNullable() string {
	if x != nil {
		return x.Nullable
	}
	return ""
}

type ScalarTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// singular
	DoubleVal   float64 `protobuf:"fixed64,1,opt,name=double_val,json=doubleVal,proto3" json:"double_val,omitempty"`
	FloatVal    float32 `protobuf:"fixed32,2,opt,name=float_val,json=floatVal,proto3" json:"float_val,omitempty"`
	Int64Val    int64   `protobuf:"varint,10,opt,name=int64_val,json=int64Val,proto3" json:"int64_val,omitempty"`
	Uint64Val   uint64  `protobuf:"varint,11,opt,name=uint64_val,json=uint64Val,proto3" json:"uint64_val,omitempty"`
	Sint64Val   int64   `protobuf:"zigzag64,12,opt,name=sint64_val,json=sint64Val,proto3" json:"sint64_val,omitempty"`
	Fixed64Val  uint64  `protobuf:"fixed64,13,opt,name=fixed64_val,json=fixed64Val,proto3" json:"fixed64_val,omitempty"`
	Sfixed64Val int64   `protobuf:"fixed64,14,opt,name=sfixed64_val,json=sfixed64Val,proto3" json:"sfixed64_val,omitempty"`
	Int32Val    int32   `protobuf:"varint,15,opt,name=int32_val,json=int32Val,proto3" json:"int32_val,omitempty"`
	Uint32Val   uint32  `protobuf:"varint,16,opt,name=uint32_val,json=uint32Val,proto3" json:"uint32_val,omitempty"`
	Sint32Val   int32   `protobuf:"zigzag32,17,opt,name=sint32_val,json=sint32Val,proto3" json:"sint32_val,omitempty"`
	Fixed32Val  uint32  `protobuf:"fixed32,18,opt,name=fixed32_val,json=fixed32Val,proto3" json:"fixed32_val,omitempty"`
	Sfixed32Val int32   `protobuf:"fixed32,19,opt,name=sfixed32_val,json=sfixed32Val,proto3" json:"sfixed32_val,omitempty"`
	BoolVal     bool    `protobuf:"varint,20,opt,name=bool_val,json=boolVal,proto3" json:"bool_val,omitempty"`
	BytesVal    []byte  `protobuf:"bytes,21,opt,name=bytes_val,json=bytesVal,proto3" json:"bytes_val,omitempty"`
	StringVal   string  `protobuf:"bytes,22,opt,name=string_val,json=stringVal,proto3" json:"string_val,omitempty"`
	// repeated
	DoubleVals   []float64 `protobuf:"fixed64,31,rep,packed,name=double_vals,json=doubleVals,proto3" json:"double_vals,omitempty"`
	FloatVals    []float32 `protobuf:"fixed32,32,rep,packed,name=float_vals,json=floatVals,proto3" json:"float_vals,omitempty"`
	Int64Vals    []int64   `protobuf:"varint,40,rep,packed,name=int64_vals,json=int64Vals,proto3" json:"int64_vals,omitempty"`
	Uint64Vals   []uint64  `protobuf:"varint,41,rep,packed,name=uint64_vals,json=uint64Vals,proto3" json:"uint64_vals,omitempty"`
	Sint64Vals   []int64   `protobuf:"zigzag64,42,rep,packed,name=sint64_vals,json=sint64Vals,proto3" json:"sint64_vals,omitempty"`
	Fixed64Vals  []uint64  `protobuf:"fixed64,43,rep,packed,name=fixed64_vals,json=fixed64Vals,proto3" json:"fixed64_vals,omitempty"`
	Sfixed64Vals []int64   `protobuf:"fixed64,44,rep,packed,name=sfixed64_vals,json=sfixed64Vals,proto3" json:"sfixed64_vals,omitempty"`
	Int32Vals    []int32   `protobuf:"varint,45,rep,packed,name=int32_vals,json=int32Vals,proto3" json:"int32_vals,omitempty"`
	Uint32Vals   []uint32  `protobuf:"varint,46,rep,packed,name=uint32_vals,json=uint32Vals,proto3" json:"uint32_vals,omitempty"`
	Sint32Vals   []int32   `protobuf:"zigzag32,47,rep,packed,name=sint32_vals,json=sint32Vals,proto3" json:"sint32_vals,omitempty"`
	Fixed32Vals  []uint32  `protobuf:"fixed32,48,rep,packed,name=fixed32_vals,json=fixed32Vals,proto3" json:"fixed32_vals,omitempty"`
	Sfixed32Vals []int32   `protobuf:"fixed32,49,rep,packed,name=sfixed32_vals,json=sfixed32Vals,proto3" json:"sfixed32_vals,omitempty"`
	BoolVals     []bool    `protobuf:"varint,50,rep,packed,name=bool_vals,json=boolVals,proto3" json:"bool_vals,omitempty"`
	BytesVals    [][]byte  `protobuf:"bytes,51,rep,name=bytes_vals,json=bytesVals,proto3" json:"bytes_vals,omitempty"`
	StringVals   []string  `protobuf:"bytes,52,rep,name=string_vals,json=stringVals,proto3" json:"string_vals,omitempty"`
}

func (x *ScalarTypes) Reset() {
	*x = ScalarTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targetservice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarTypes) ProtoMessage() {}

func (x *ScalarTypes) ProtoReflect() protoreflect.Message {
	mi := &file_targetservice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarTypes.ProtoReflect.Descriptor instead.
func (*ScalarTypes) Descriptor() ([]byte, []int) {
	return file_targetservice_proto_rawDescGZIP(), []int{11}
}

func (x *ScalarTypes) GetDoubleVal() float64 {
	if x != nil {
		return x.DoubleVal
	}
	return 0
}

func (x *ScalarTypes) GetFloatVal() float32 {
	if x != nil {
		return x.FloatVal
	}
	return 0
}

func (x *ScalarTypes) GetInt64Val() int64 {
	if x != nil {
		return x.Int64Val
	}
	return 0
}

func (x *ScalarTypes) GetUint64Val() uint64 {
	if x != nil {
		return x.Uint64Val
	}
	return 0
}

func (x *ScalarTypes) GetSint64Val() int64 {
	if x != nil {
		return x.Sint64Val
	}
	return 0
}

func (x *ScalarTypes) GetFixed64Val() uint64 {
	if x != nil {
		return x.Fixed64Val
	}
	return 0
}

func (x *ScalarTypes) GetSfixed64Val() int64 {
	if x != nil {
		return x.Sfixed64Val
	}
	return 0
}

func (x *ScalarTypes) GetInt32Val() int32 {
	if x != nil {
		return x.Int32Val
	}
	return 0
}

func (x *ScalarTypes) GetUint32Val() uint32 {
	if x != nil {
		return x.Uint32Val
	}
	return 0
}

func (x *ScalarTypes) GetSint32Val() int32 {
	if x != nil {
		return x.Sint32Val
	}
	return 0
}

func (x *ScalarTypes) GetFixed32Val() uint32 {
	if x != nil {
		return x.Fixed32Val
	}
	return 0
}

func (x *ScalarTypes) GetSfixed32Val() int32 {
	if x != nil {
		return x.Sfixed32Val
	}
	return 0
}

func (x *ScalarTypes) GetBoolVal() bool {
	if x != nil {
		return x.BoolVal
	}
	return false
}

func (x *ScalarTypes) GetBytesVal() []byte {
	if x != nil {
		return x.BytesVal
	}
	return nil
}

func (x *ScalarTypes) GetStringVal() string {
	if x != nil {
		return x.StringVal
	}
	return ""
}

func (x *ScalarTypes) GetDoubleVals() []float64 {
	if x != nil {
		return x.DoubleVals
	}
	return nil
}

func (x *ScalarTypes) GetFloatVals() []float32 {
	if x != nil {
		return x.FloatVals
	}
	return nil
}

func (x *ScalarTypes) GetInt64Vals() []int64 {
	if x != nil {
		return x.Int64Vals
	}
	return nil
}

func (x *ScalarTypes) GetUint64Vals() []uint64 {
	if x != nil {
		return x.Uint64Vals
	}
	return nil
}

func (x *ScalarTypes) GetSint64Vals() []int64 {
	if x != nil {
		return x.Sint64Vals
	}
	return nil
}

func (x *ScalarTypes) GetFixed64Vals() []uint64 {
	if x != nil {
		return x.Fixed64Vals
	}
	return nil
}

func (x *ScalarTypes) GetSfixed64Vals() []int64 {
	if x != nil {
		return x.Sfixed64Vals
	}
	return nil
}

func (x *ScalarTypes) GetInt32Vals() []int32 {
	if x != nil {
		return x.Int32Vals
	}
	return nil
}

func (x *ScalarTypes) GetUint32Vals() []uint32 {
	if x != nil {
		return x.Uint32Vals
	}
	return nil
}

func (x *ScalarTypes) GetSint32Vals() []int32 {
	if x != nil {
		return x.Sint32Vals
	}
	return nil
}

func (x *ScalarTypes) GetFixed32Vals() []uint32 {
	if x != nil {
		return x.Fixed32Vals
	}
	return nil
}

func (x *ScalarTypes) GetSfixed32Vals() []int32 {
	if x != nil {
		return x.Sfixed32Vals
	}
	return nil
}

func (x *ScalarTypes) GetBoolVals() []bool {
	if x != nil {
		return x.BoolVals
	}
	return nil
}

func (x *ScalarTypes) GetBytesVals() [][]byte {
	if x != nil {
		return x.BytesVals
	}
	return nil
}

func (x *ScalarTypes) GetStringVals() []string {
	if x != nil {
		return x.StringVals
	}
	return nil
}

type WrapperTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// singular
	DoubleWrapper *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=double_wrapper,json=doubleWrapper,proto3" json:"double_wrapper,omitempty"`
	FloatWrapper  *wrapperspb.FloatValue  `protobuf:"bytes,2,opt,name=float_wrapper,json=floatWrapper,proto3" json:"float_wrapper,omitempty"`
	Int64Wrapper  *wrapperspb.Int64Value  `protobuf:"bytes,3,opt,name=int64_wrapper,json=int64Wrapper,proto3" json:"int64_wrapper,omitempty"`
	Uint64Wrapper *wrapperspb.UInt64Value `protobuf:"bytes,4,opt,name=uint64_wrapper,json=uint64Wrapper,proto3" json:"uint64_wrapper,omitempty"`
	Int32Wrapper  *wrapperspb.Int32Value  `protobuf:"bytes,5,opt,name=int32_wrapper,json=int32Wrapper,proto3" json:"int32_wrapper,omitempty"`
	Uint32Wrapper *wrapperspb.UInt32Value `protobuf:"bytes,6,opt,name=uint32_wrapper,json=uint32Wrapper,proto3" json:"uint32_wrapper,omitempty"`
	BoolWrapper   *wrapperspb.BoolValue   `protobuf:"bytes,7,opt,name=bool_wrapper,json=boolWrapper,proto3" json:"bool_wrapper,omitempty"`
	StringWrapper *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=string_wrapper,json=stringWrapper,proto3" json:"string_wrapper,omitempty"`
	BytesWrapper  *wrapperspb.BytesValue  `protobuf:"bytes,9,opt,name=bytes_wrapper,json=bytesWrapper,proto3" json:"bytes_wrapper,omitempty"`
	// repeated wrappers
	DoubleWrappers []*wrapperspb.DoubleValue `protobuf:"bytes,10,rep,name=double_wrappers,json=doubleWrappers,proto3" json:"double_wrappers,omitempty"`
	FloatWrappers  []*wrapperspb.FloatValue  `protobuf:"bytes,11,rep,name=float_wrappers,json=floatWrappers,proto3" json:"float_wrappers,omitempty"`
	Int64Wrappers  []*wrapperspb.Int64Value  `protobuf:"bytes,12,rep,name=int64_wrappers,json=int64Wrappers,proto3" json:"int64_wrappers,omitempty"`
	Uint64Wrappers []*wrapperspb.UInt64Value `protobuf:"bytes,13,rep,name=uint64_wrappers,json=uint64Wrappers,proto3" json:"uint64_wrappers,omitempty"`
	Int32Wrappers  []*wrapperspb.Int32Value  `protobuf:"bytes,14,rep,name=int32_wrappers,json=int32Wrappers,proto3" json:"int32_wrappers,omitempty"`
	Uint32Wrappers []*wrapperspb.UInt32Value `protobuf:"bytes,15,rep,name=uint32_wrappers,json=uint32Wrappers,proto3" json:"uint32_wrappers,omitempty"`
	BoolWrappers   []*wrapperspb.BoolValue   `protobuf:"bytes,16,rep,name=bool_wrappers,json=boolWrappers,proto3" json:"bool_wrappers,omitempty"`
	StringWrappers []*wrapperspb.StringValue `protobuf:"bytes,17,rep,name=string_wrappers,json=stringWrappers,proto3" json:"string_wrappers,omitempty"`
	BytesWrappers  []*wrapperspb.BytesValue  `protobuf:"bytes,18,rep,name=bytes_wrappers,json=bytesWrappers,proto3" json:"bytes_wrappers,omitempty"`
}

func (x *WrapperTypes) Reset() {
	*x = WrapperTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targetservice_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WrapperTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WrapperTypes) ProtoMessage() {}

func (x *WrapperTypes) ProtoReflect() protoreflect.Message {
	mi := &file_targetservice_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WrapperTypes.ProtoReflect.Descriptor instead.
func (*WrapperTypes) Descriptor() ([]byte, []int) {
	return file_targetservice_proto_rawDescGZIP(), []int{12}
}

func (x *WrapperTypes) GetDoubleWrapper() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleWrapper
	}
	return nil
}

func (x *WrapperTypes) GetFloatWrapper() *wrapperspb.FloatValue {
	if x != nil {
		return x.FloatWrapper
	}
	return nil
}

func (x *WrapperTypes) GetInt64Wrapper() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int64Wrapper
	}
	return nil
}

func (x *WrapperTypes) GetUint64Wrapper() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Uint64Wrapper
	}
	return nil
}

func (x *WrapperTypes) GetInt32Wrapper() *wrapperspb.Int32Value {
	if x != nil {
		return x.Int32Wrapper
	}
	return nil
}

func (x *WrapperTypes) GetUint32Wrapper() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Uint32Wrapper
	}
	return nil
}

func (x *WrapperTypes) GetBoolWrapper() *wrapperspb.BoolValue {
	if x != nil {
		return x.BoolWrapper
	}
	return nil
}

func (x *WrapperTypes) GetStringWrapper() *wrapperspb.StringValue {
	if x != nil {
		return x.StringWrapper
	}
	return nil
}

func (x *WrapperTypes) GetBytesWrapper() *wrapperspb.BytesValue {
	if x != nil {
		return x.BytesWrapper
	}
	return nil
}

func (x *WrapperTypes) GetDoubleWrappers() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleWrappers
	}
	return nil
}

func (x *WrapperTypes) GetFloatWrappers() []*wrapperspb.FloatValue {
	if x != nil {
		return x.FloatWrappers
	}
	return nil
}

func (x *WrapperTypes) GetInt64Wrappers() []*wrapperspb.Int64Value {
	if x != nil {
		return x.Int64Wrappers
	}
	return nil
}

func (x *WrapperTypes) GetUint64Wrappers() []*wrapperspb.UInt64Value {
	if x != nil {
		return x.Uint64Wrappers
	}
	return nil
}

func (x *WrapperTypes) GetInt32Wrappers() []*wrapperspb.Int32Value {
	if x != nil {
		return x.Int32Wrappers
	}
	return nil
}

func (x *WrapperTypes) GetUint32Wrappers() []*wrapperspb.UInt32Value {
	if x != nil {
		return x.Uint32Wrappers
	}
	return nil
}

func (x *WrapperTypes) GetBoolWrappers() []*wrapperspb.BoolValue {
	if x != nil {
		return x.BoolWrappers
	}
	return nil
}

func (x *WrapperTypes) GetStringWrappers() []*wrapperspb.StringValue {
	if x != nil {
		return x.StringWrappers
	}
	return nil
}

func (x *WrapperTypes) GetBytesWrappers() []*wrapperspb.BytesValue {
	if x != nil {
		return x.BytesWrappers
	}
	return nil
}

type ComplexType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// signed value larger than JSON int type
	Int64Val int64 `protobuf:"varint,1,opt,name=int64_val,json=int64Val,proto3" json:"int64_val,omitempty"`
	// signed value within JSON limits
	Int32Val  int32  `protobuf:"varint,2,opt,name=int32_val,json=int32Val,proto3" json:"int32_val,omitempty"`
	BoolVal   bool   `protobuf:"varint,3,opt,name=bool_val,json=boolVal,proto3" json:"bool_val,omitempty"`
	BytesVal  []byte `protobuf:"bytes,4,opt,name=bytes_val,json=bytesVal,proto3" json:"bytes_val,omitempty"`
	StringVal string `protobuf:"bytes,5,opt,name=string_val,json=stringVal,proto3" json:"string_val,omitempty"`
	EnumVal   Foo    `protobuf:"varint,6,opt,name=enum_val,json=enumVal,proto3,enum=targetservice.Foo" json:"enum_val,omitempty"`
	// int-indexed map
	IntMap map[uint64]*ComplexType `protobuf:"bytes,10,rep,name=int_map,json=intMap,proto3" json:"int_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// string-indexed map
	StringMap map[string]*ComplexType `protobuf:"bytes,11,rep,name=string_map,json=stringMap,proto3" json:"string_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// singular recursion
	ComplexValue *ComplexType `protobuf:"bytes,15,opt,name=complex_value,json=singularComplex,proto3" json:"complex_value,omitempty"`
	// repeated recursion
	ComplexValues []*ComplexType `protobuf:"bytes,16,rep,name=complex_values,json=repeatedComplex,proto3" json:"complex_values,omitempty"`
	// any types
	Any *anypb.Any `protobuf:"bytes,20,opt,name=any,proto3" json:"any,omitempty"`
	// true if any.@type was recognized and processed
	AnyProcessed bool `protobuf:"varint,21,opt,name=any_processed,json=anyProcessed,proto3" json:"any_processed,omitempty"`
	// field_mask type needs to respect JsonNames too
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,30,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *ComplexType) Reset() {
	*x = ComplexType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_targetservice_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComplexType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComplexType) ProtoMessage() {}

func (x *ComplexType) ProtoReflect() protoreflect.Message {
	mi := &file_targetservice_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComplexType.ProtoReflect.Descriptor instead.
func (*ComplexType) Descriptor() ([]byte, []int) {
	return file_targetservice_proto_rawDescGZIP(), []int{13}
}

func (x *ComplexType) GetInt64Val() int64 {
	if x != nil {
		return x.Int64Val
	}
	return 0
}

func (x *ComplexType) GetInt32Val() int32 {
	if x != nil {
		return x.Int32Val
	}
	return 0
}

func (x *ComplexType) GetBoolVal() bool {
	if x != nil {
		return x.BoolVal
	}
	return false
}

func (x *ComplexType) GetBytesVal() []byte {
	if x != nil {
		return x.BytesVal
	}
	return nil
}

func (x *ComplexType) GetStringVal() string {
	if x != nil {
		return x.StringVal
	}
	return ""
}

func (x *ComplexType) GetEnumVal() Foo {
	if x != nil {
		return x.EnumVal
	}
	return Foo_FOO_UNSPECIFIED
}

func (x *ComplexType) GetIntMap() map[uint64]*ComplexType {
	if x != nil {
		return x.IntMap
	}
	return nil
}

func (x *ComplexType) GetStringMap() map[string]*ComplexType {
	if x != nil {
		return x.StringMap
	}
	return nil
}

func (x *ComplexType) GetComplexValue() *ComplexType {
	if x != nil {
		return x.ComplexValue
	}
	return nil
}

func (x *ComplexType) GetComplexValues() []*ComplexType {
	if x != nil {
		return x.ComplexValues
	}
	return nil
}

func (x *ComplexType) GetAny() *anypb.Any {
	if x != nil {
		return x.Any
	}
	return nil
}

func (x *ComplexType) GetAnyProcessed() bool {
	if x != nil {
		return x.AnyProcessed
	}
	return false
}

func (x *ComplexType) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

var File_targetservice_proto protoreflect.FileDescriptor

var file_targetservice_proto_rawDesc = []byte{
	0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d,
	0x0a, 0x0c, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6f,
	0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a,
	0x0d, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6c,
	0x65, 0x61, 0x6e, 0x54, 0x65, 0x73, 0x74, 0x22, 0xb5, 0x01, 0x0a, 0x16, 0x42, 0x6f, 0x75, 0x6e,
	0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x77, 0x68,
	0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x6e, 0x6f, 0x77,
	0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x74, 0x70, 0x6f, 0x6e, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22,
	0xba, 0x01, 0x0a, 0x17, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x03, 0x6e,
	0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x12, 0x35, 0x0a, 0x08, 0x6e, 0x65, 0x77,
	0x5f, 0x77, 0x68, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x57, 0x68, 0x65, 0x6e,
	0x12, 0x3a, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x22, 0x97, 0x01, 0x0a,
	0x19, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x5d, 0x0a, 0x1a, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x06, 0x42, 0x61, 0x6c, 0x6c, 0x49, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x77, 0x68,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x77, 0x68, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x03, 0x6e, 0x6f,
	0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x22, 0x70, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x6c,
	0x4f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x03,
	0x6e, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x6e, 0x6f, 0x77, 0x22, 0x36, 0x0a, 0x04, 0x4c, 0x69,
	0x6d, 0x62, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0x97, 0x01, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x29, 0x0a, 0x05, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c,
	0x69, 0x6d, 0x62, 0x52, 0x05, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x65,
	0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x62, 0x52, 0x04, 0x6c,
	0x65, 0x67, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4c, 0x69, 0x6d, 0x62, 0x52, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x3b, 0x0a, 0x07,
	0x45, 0x63, 0x68, 0x6f, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x61, 0x72, 0x72, 0x61, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xcd, 0x07, 0x0a, 0x0b, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76,
	0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x12, 0x52, 0x09, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0b, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0b, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x01, 0x52,
	0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x02, 0x52,
	0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x2a, 0x20, 0x03, 0x28, 0x12, 0x52,
	0x0a, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28,
	0x06, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x73, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18,
	0x2c, 0x20, 0x03, 0x28, 0x10, 0x52, 0x0c, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c,
	0x73, 0x18, 0x2d, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c,
	0x73, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x73, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x11, 0x52, 0x0a, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f,
	0x76, 0x61, 0x6c, 0x73, 0x18, 0x30, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0b, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x31, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x0c,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x32, 0x20, 0x03, 0x28, 0x08, 0x52,
	0x08, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x73, 0x18, 0x34, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x73, 0x22, 0xd6, 0x09, 0x0a, 0x0c, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12,
	0x40, 0x0a, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x12, 0x40, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0e, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0e, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12,
	0x3d, 0x0a, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0b, 0x62, 0x6f, 0x6f, 0x6c, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x43,
	0x0a, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x0f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0e,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x18, 0x0b,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x12, 0x42, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0d, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x12,
	0x45, 0x0a, 0x0f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x12, 0x3f, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x6c, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x12, 0x42,
	0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x62, 0x79, 0x74, 0x65, 0x73, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x22, 0x9a, 0x06, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x12, 0x19, 0x0a, 0x08,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76,
	0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x46, 0x6f, 0x6f, 0x52, 0x07, 0x65, 0x6e, 0x75, 0x6d, 0x56,
	0x61, 0x6c, 0x12, 0x3f, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x69, 0x6e, 0x74,
	0x4d, 0x61, 0x70, 0x12, 0x48, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x12, 0x42, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0f, 0x73, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x03, 0x61, 0x6e, 0x79, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x03, 0x61, 0x6e, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x6e, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6e, 0x79, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0x55,
	0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x58, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a,
	0x47, 0x0a, 0x03, 0x46, 0x6f, 0x6f, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x4f, 0x4f, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x46,
	0x4f, 0x4f, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x4f, 0x4f, 0x5f, 0x41, 0x4e, 0x4f, 0x54, 0x48, 0x45, 0x52,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x10, 0x02, 0x32, 0xb3, 0x08, 0x0a, 0x07, 0x42, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x72, 0x12, 0x9f, 0x01, 0x0a, 0x08, 0x53, 0x61, 0x79, 0x48, 0x65, 0x6c, 0x6c,
	0x6f, 0x12, 0x1b, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48,
	0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x52, 0x3a, 0x01, 0x2a, 0x5a, 0x34, 0x5a, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x6c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x2f,
	0x7b, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x3d, 0x2a, 0x2a, 0x7d, 0x12, 0x17, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x67, 0x72, 0x65,
	0x65, 0x74, 0x69, 0x6e, 0x67, 0x7d, 0x12, 0x6a, 0x0a, 0x0d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1b, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2f, 0x7b, 0x67, 0x72, 0x65, 0x65, 0x74, 0x69, 0x6e,
	0x67, 0x7d, 0x12, 0x7d, 0x0a, 0x0f, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x25, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01, 0x2a, 0x22,
	0x10, 0x2f, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x47, 0x6f, 0x6f, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x12, 0x62, 0x0a, 0x0d, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x73, 0x12, 0x1a, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x1a,
	0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x73, 0x12, 0x66, 0x0a, 0x0e, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x12, 0x1b, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x1a, 0x1b, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x73, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x62,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x12, 0x5a, 0x0a,
	0x0c, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x17, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x1a, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x22,
	0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x62, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x89, 0x01, 0x0a, 0x12, 0x42, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x28, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x63,
	0x65, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a,
	0x22, 0x13, 0x2f, 0x62, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x65, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x4d, 0x0a, 0x08, 0x42, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x49,
	0x74, 0x12, 0x15, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x49, 0x6e, 0x1a, 0x16, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x61, 0x6c, 0x6c, 0x4f, 0x75, 0x74,
	0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x3a, 0x01, 0x2a, 0x22, 0x07, 0x2f, 0x62, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x77, 0x54, 0x61, 0x69, 0x6c,
	0x12, 0x13, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x13, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x72, 0x6f, 0x77, 0x2f, 0x74, 0x61, 0x69,
	0x6c, 0x12, 0x4b, 0x0a, 0x04, 0x45, 0x63, 0x68, 0x6f, 0x12, 0x16, 0x2e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x4d, 0x73,
	0x67, 0x1a, 0x16, 0x2e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x4d, 0x73, 0x67, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x42, 0x11,
	0x5a, 0x0f, 0x2e, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_targetservice_proto_rawDescOnce sync.Once
	file_targetservice_proto_rawDescData = file_targetservice_proto_rawDesc
)

func file_targetservice_proto_rawDescGZIP() []byte {
	file_targetservice_proto_rawDescOnce.Do(func() {
		file_targetservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_targetservice_proto_rawDescData)
	})
	return file_targetservice_proto_rawDescData
}

var file_targetservice_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_targetservice_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_targetservice_proto_goTypes = []interface{}{
	(Foo)(0),                           // 0: targetservice.Foo
	(*HelloRequest)(nil),               // 1: targetservice.HelloRequest
	(*HelloResponse)(nil),              // 2: targetservice.HelloResponse
	(*BounceGoodTimesRequest)(nil),     // 3: targetservice.BounceGoodTimesRequest
	(*BounceGoodTimesResponse)(nil),    // 4: targetservice.BounceGoodTimesResponse
	(*BounceMaskedFieldsRequest)(nil),  // 5: targetservice.BounceMaskedFieldsRequest
	(*BounceMaskedFieldsResponse)(nil), // 6: targetservice.BounceMaskedFieldsResponse
	(*BallIn)(nil),                     // 7: targetservice.BallIn
	(*BallOut)(nil),                    // 8: targetservice.BallOut
	(*Limb)(nil),                       // 9: targetservice.Limb
	(*Body)(nil),                       // 10: targetservice.Body
	(*EchoMsg)(nil),                    // 11: targetservice.EchoMsg
	(*ScalarTypes)(nil),                // 12: targetservice.ScalarTypes
	(*WrapperTypes)(nil),               // 13: targetservice.WrapperTypes
	(*ComplexType)(nil),                // 14: targetservice.ComplexType
	nil,                                // 15: targetservice.ComplexType.IntMapEntry
	nil,                                // 16: targetservice.ComplexType.StringMapEntry
	(*timestamppb.Timestamp)(nil),      // 17: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),        // 18: google.protobuf.Duration
	(*fieldmaskpb.FieldMask)(nil),      // 19: google.protobuf.FieldMask
	(*wrapperspb.DoubleValue)(nil),     // 20: google.protobuf.DoubleValue
	(*wrapperspb.FloatValue)(nil),      // 21: google.protobuf.FloatValue
	(*wrapperspb.Int64Value)(nil),      // 22: google.protobuf.Int64Value
	(*wrapperspb.UInt64Value)(nil),     // 23: google.protobuf.UInt64Value
	(*wrapperspb.Int32Value)(nil),      // 24: google.protobuf.Int32Value
	(*wrapperspb.UInt32Value)(nil),     // 25: google.protobuf.UInt32Value
	(*wrapperspb.BoolValue)(nil),       // 26: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),     // 27: google.protobuf.StringValue
	(*wrapperspb.BytesValue)(nil),      // 28: google.protobuf.BytesValue
	(*anypb.Any)(nil),                  // 29: google.protobuf.Any
	(*structpb.Struct)(nil),            // 30: google.protobuf.Struct
}
var file_targetservice_proto_depIdxs = []int32{
	17, // 0: targetservice.BounceGoodTimesRequest.when:type_name -> google.protobuf.Timestamp
	17, // 1: targetservice.BounceGoodTimesRequest.now:type_name -> google.protobuf.Timestamp
	18, // 2: targetservice.BounceGoodTimesRequest.postponement:type_name -> google.protobuf.Duration
	17, // 3: targetservice.BounceGoodTimesResponse.now:type_name -> google.protobuf.Timestamp
	17, // 4: targetservice.BounceGoodTimesResponse.new_when:type_name -> google.protobuf.Timestamp
	18, // 5: targetservice.BounceGoodTimesResponse.total_delay:type_name -> google.protobuf.Duration
	14, // 6: targetservice.BounceMaskedFieldsRequest.complex_value:type_name -> targetservice.ComplexType
	19, // 7: targetservice.BounceMaskedFieldsRequest.field_mask:type_name -> google.protobuf.FieldMask
	14, // 8: targetservice.BounceMaskedFieldsResponse.complex_value:type_name -> targetservice.ComplexType
	17, // 9: targetservice.BallIn.when:type_name -> google.protobuf.Timestamp
	17, // 10: targetservice.BallIn.now:type_name -> google.protobuf.Timestamp
	17, // 11: targetservice.BallOut.now:type_name -> google.protobuf.Timestamp
	9,  // 12: targetservice.Body.hands:type_name -> targetservice.Limb
	9,  // 13: targetservice.Body.legs:type_name -> targetservice.Limb
	9,  // 14: targetservice.Body.tail:type_name -> targetservice.Limb
	20, // 15: targetservice.WrapperTypes.double_wrapper:type_name -> google.protobuf.DoubleValue
	21, // 16: targetservice.WrapperTypes.float_wrapper:type_name -> google.protobuf.FloatValue
	22, // 17: targetservice.WrapperTypes.int64_wrapper:type_name -> google.protobuf.Int64Value
	23, // 18: targetservice.WrapperTypes.uint64_wrapper:type_name -> google.protobuf.UInt64Value
	24, // 19: targetservice.WrapperTypes.int32_wrapper:type_name -> google.protobuf.Int32Value
	25, // 20: targetservice.WrapperTypes.uint32_wrapper:type_name -> google.protobuf.UInt32Value
	26, // 21: targetservice.WrapperTypes.bool_wrapper:type_name -> google.protobuf.BoolValue
	27, // 22: targetservice.WrapperTypes.string_wrapper:type_name -> google.protobuf.StringValue
	28, // 23: targetservice.WrapperTypes.bytes_wrapper:type_name -> google.protobuf.BytesValue
	20, // 24: targetservice.WrapperTypes.double_wrappers:type_name -> google.protobuf.DoubleValue
	21, // 25: targetservice.WrapperTypes.float_wrappers:type_name -> google.protobuf.FloatValue
	22, // 26: targetservice.WrapperTypes.int64_wrappers:type_name -> google.protobuf.Int64Value
	23, // 27: targetservice.WrapperTypes.uint64_wrappers:type_name -> google.protobuf.UInt64Value
	24, // 28: targetservice.WrapperTypes.int32_wrappers:type_name -> google.protobuf.Int32Value
	25, // 29: targetservice.WrapperTypes.uint32_wrappers:type_name -> google.protobuf.UInt32Value
	26, // 30: targetservice.WrapperTypes.bool_wrappers:type_name -> google.protobuf.BoolValue
	27, // 31: targetservice.WrapperTypes.string_wrappers:type_name -> google.protobuf.StringValue
	28, // 32: targetservice.WrapperTypes.bytes_wrappers:type_name -> google.protobuf.BytesValue
	0,  // 33: targetservice.ComplexType.enum_val:type_name -> targetservice.Foo
	15, // 34: targetservice.ComplexType.int_map:type_name -> targetservice.ComplexType.IntMapEntry
	16, // 35: targetservice.ComplexType.string_map:type_name -> targetservice.ComplexType.StringMapEntry
	14, // 36: targetservice.ComplexType.complex_value:type_name -> targetservice.ComplexType
	14, // 37: targetservice.ComplexType.complex_values:type_name -> targetservice.ComplexType
	29, // 38: targetservice.ComplexType.any:type_name -> google.protobuf.Any
	19, // 39: targetservice.ComplexType.field_mask:type_name -> google.protobuf.FieldMask
	14, // 40: targetservice.ComplexType.IntMapEntry.value:type_name -> targetservice.ComplexType
	14, // 41: targetservice.ComplexType.StringMapEntry.value:type_name -> targetservice.ComplexType
	1,  // 42: targetservice.Bouncer.SayHello:input_type -> targetservice.HelloRequest
	1,  // 43: targetservice.Bouncer.UnknownMethod:input_type -> targetservice.HelloRequest
	3,  // 44: targetservice.Bouncer.BounceGoodTimes:input_type -> targetservice.BounceGoodTimesRequest
	12, // 45: targetservice.Bouncer.BounceScalars:input_type -> targetservice.ScalarTypes
	13, // 46: targetservice.Bouncer.BounceWrappers:input_type -> targetservice.WrapperTypes
	30, // 47: targetservice.Bouncer.BounceStruct:input_type -> google.protobuf.Struct
	5,  // 48: targetservice.Bouncer.BounceMaskedFields:input_type -> targetservice.BounceMaskedFieldsRequest
	7,  // 49: targetservice.Bouncer.BounceIt:input_type -> targetservice.BallIn
	10, // 50: targetservice.Bouncer.GrowTail:input_type -> targetservice.Body
	11, // 51: targetservice.Bouncer.Echo:input_type -> targetservice.EchoMsg
	2,  // 52: targetservice.Bouncer.SayHello:output_type -> targetservice.HelloResponse
	2,  // 53: targetservice.Bouncer.UnknownMethod:output_type -> targetservice.HelloResponse
	4,  // 54: targetservice.Bouncer.BounceGoodTimes:output_type -> targetservice.BounceGoodTimesResponse
	12, // 55: targetservice.Bouncer.BounceScalars:output_type -> targetservice.ScalarTypes
	13, // 56: targetservice.Bouncer.BounceWrappers:output_type -> targetservice.WrapperTypes
	30, // 57: targetservice.Bouncer.BounceStruct:output_type -> google.protobuf.Struct
	6,  // 58: targetservice.Bouncer.BounceMaskedFields:output_type -> targetservice.BounceMaskedFieldsResponse
	8,  // 59: targetservice.Bouncer.BounceIt:output_type -> targetservice.BallOut
	10, // 60: targetservice.Bouncer.GrowTail:output_type -> targetservice.Body
	11, // 61: targetservice.Bouncer.Echo:output_type -> targetservice.EchoMsg
	52, // [52:62] is the sub-list for method output_type
	42, // [42:52] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_targetservice_proto_init() }
func file_targetservice_proto_init() {
	if File_targetservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_targetservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targetservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targetservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BounceGoodTimesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targetservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BounceGoodTimesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targetservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BounceMaskedFieldsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targetservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BounceMaskedFieldsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targetservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BallIn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targetservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BallOut); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targetservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Limb); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targetservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targetservice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EchoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targetservice_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targetservice_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WrapperTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_targetservice_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComplexType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_targetservice_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_targetservice_proto_goTypes,
		DependencyIndexes: file_targetservice_proto_depIdxs,
		EnumInfos:         file_targetservice_proto_enumTypes,
		MessageInfos:      file_targetservice_proto_msgTypes,
	}.Build()
	File_targetservice_proto = out.File
	file_targetservice_proto_rawDesc = nil
	file_targetservice_proto_goTypes = nil
	file_targetservice_proto_depIdxs = nil
}
