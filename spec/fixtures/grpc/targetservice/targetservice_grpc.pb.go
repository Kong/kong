// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: targetservice.proto

package targetservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Bouncer_SayHello_FullMethodName      = "/targetservice.Bouncer/SayHello"
	Bouncer_UnknownMethod_FullMethodName = "/targetservice.Bouncer/UnknownMethod"
	Bouncer_BounceIt_FullMethodName      = "/targetservice.Bouncer/BounceIt"
	Bouncer_GrowTail_FullMethodName      = "/targetservice.Bouncer/GrowTail"
	Bouncer_Echo_FullMethodName          = "/targetservice.Bouncer/Echo"
	Bouncer_EchoHeaders_FullMethodName   = "/targetservice.Bouncer/EchoHeaders"
)

// BouncerClient is the client API for Bouncer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BouncerClient interface {
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	// define a gRPC method that's not implemented in the target
	UnknownMethod(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
	BounceIt(ctx context.Context, in *BallIn, opts ...grpc.CallOption) (*BallOut, error)
	GrowTail(ctx context.Context, in *Body, opts ...grpc.CallOption) (*Body, error)
	Echo(ctx context.Context, in *EchoMsg, opts ...grpc.CallOption) (*EchoMsg, error)
	EchoHeaders(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Headers, error)
}

type bouncerClient struct {
	cc grpc.ClientConnInterface
}

func NewBouncerClient(cc grpc.ClientConnInterface) BouncerClient {
	return &bouncerClient{cc}
}

func (c *bouncerClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, Bouncer_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bouncerClient) UnknownMethod(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, Bouncer_UnknownMethod_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bouncerClient) BounceIt(ctx context.Context, in *BallIn, opts ...grpc.CallOption) (*BallOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BallOut)
	err := c.cc.Invoke(ctx, Bouncer_BounceIt_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bouncerClient) GrowTail(ctx context.Context, in *Body, opts ...grpc.CallOption) (*Body, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Body)
	err := c.cc.Invoke(ctx, Bouncer_GrowTail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bouncerClient) Echo(ctx context.Context, in *EchoMsg, opts ...grpc.CallOption) (*EchoMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EchoMsg)
	err := c.cc.Invoke(ctx, Bouncer_Echo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bouncerClient) EchoHeaders(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Headers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Headers)
	err := c.cc.Invoke(ctx, Bouncer_EchoHeaders_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BouncerServer is the server API for Bouncer service.
// All implementations must embed UnimplementedBouncerServer
// for forward compatibility.
type BouncerServer interface {
	SayHello(context.Context, *HelloRequest) (*HelloResponse, error)
	// define a gRPC method that's not implemented in the target
	UnknownMethod(context.Context, *HelloRequest) (*HelloResponse, error)
	BounceIt(context.Context, *BallIn) (*BallOut, error)
	GrowTail(context.Context, *Body) (*Body, error)
	Echo(context.Context, *EchoMsg) (*EchoMsg, error)
	EchoHeaders(context.Context, *Void) (*Headers, error)
	mustEmbedUnimplementedBouncerServer()
}

// UnimplementedBouncerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBouncerServer struct{}

func (UnimplementedBouncerServer) SayHello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedBouncerServer) UnknownMethod(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnknownMethod not implemented")
}
func (UnimplementedBouncerServer) BounceIt(context.Context, *BallIn) (*BallOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BounceIt not implemented")
}
func (UnimplementedBouncerServer) GrowTail(context.Context, *Body) (*Body, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrowTail not implemented")
}
func (UnimplementedBouncerServer) Echo(context.Context, *EchoMsg) (*EchoMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedBouncerServer) EchoHeaders(context.Context, *Void) (*Headers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EchoHeaders not implemented")
}
func (UnimplementedBouncerServer) mustEmbedUnimplementedBouncerServer() {}
func (UnimplementedBouncerServer) testEmbeddedByValue()                 {}

// UnsafeBouncerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BouncerServer will
// result in compilation errors.
type UnsafeBouncerServer interface {
	mustEmbedUnimplementedBouncerServer()
}

func RegisterBouncerServer(s grpc.ServiceRegistrar, srv BouncerServer) {
	// If the following call pancis, it indicates UnimplementedBouncerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Bouncer_ServiceDesc, srv)
}

func _Bouncer_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BouncerServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bouncer_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BouncerServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bouncer_UnknownMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BouncerServer).UnknownMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bouncer_UnknownMethod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BouncerServer).UnknownMethod(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bouncer_BounceIt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BallIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BouncerServer).BounceIt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bouncer_BounceIt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BouncerServer).BounceIt(ctx, req.(*BallIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bouncer_GrowTail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Body)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BouncerServer).GrowTail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bouncer_GrowTail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BouncerServer).GrowTail(ctx, req.(*Body))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bouncer_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BouncerServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bouncer_Echo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BouncerServer).Echo(ctx, req.(*EchoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bouncer_EchoHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BouncerServer).EchoHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bouncer_EchoHeaders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BouncerServer).EchoHeaders(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

// Bouncer_ServiceDesc is the grpc.ServiceDesc for Bouncer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bouncer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "targetservice.Bouncer",
	HandlerType: (*BouncerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _Bouncer_SayHello_Handler,
		},
		{
			MethodName: "UnknownMethod",
			Handler:    _Bouncer_UnknownMethod_Handler,
		},
		{
			MethodName: "BounceIt",
			Handler:    _Bouncer_BounceIt_Handler,
		},
		{
			MethodName: "GrowTail",
			Handler:    _Bouncer_GrowTail_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _Bouncer_Echo_Handler,
		},
		{
			MethodName: "EchoHeaders",
			Handler:    _Bouncer_EchoHeaders_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "targetservice.proto",
}
